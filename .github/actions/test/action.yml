name: 'Run Tests & Quality Checks'
description: 'Runs tests, quality checks, security audits, and optionally uploads coverage'
inputs:
  test-command:
    description: 'Test command to run'
    required: false
    default: 'ci:test'
  quality-command:
    description: 'Quality check command to run'
    required: false
    default: 'ci:quality'
  security-command:
    description: 'Security check command to run'
    required: false
    default: 'ci:security'
  coverage-upload:
    description: 'Whether to upload coverage reports'
    required: false
    default: 'true'
  working-directory:
    description: 'Working directory for the job'
    required: false
    default: ''
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  pnpm-version:
    description: 'pnpm version to use'
    required: false
    default: '10.15.1'
  codecov-token:
    description: 'Codecov token for coverage uploads'
    required: false
    default: ''
  github-sha:
    description: 'GitHub SHA for artifact naming'
    required: false
    default: ''
  env:
    description: 'Environment variables to set (JSON string)'
    required: false
    default: '{}'
runs:
  using: 'composite'
  steps:
    - name: Setup environment
      uses: ./.github/actions/setup
      with:
        node-version: ${{ inputs.node-version }}
        pnpm-version: ${{ inputs.pnpm-version }}
        working-directory: ${{ inputs.working-directory }}

    - name: Set environment variables
      shell: bash
      env:
        INPUT_ENV: ${{ inputs.env }}
      run: |
        if [[ "${INPUT_ENV}" != "{}" ]]; then
          # Robustly handle any characters/newlines
          node -e '
            const env = JSON.parse(process.env.INPUT_ENV || "{}");
            const fs = require("fs");
            const out = Object.entries(env)
              .map(([k,v]) => `${k}<<__EOF__\n${v}\n__EOF__`)
              .join("\n") + "\n";
            fs.appendFileSync(process.env.GITHUB_ENV, out);
          '
        fi

    - name: Run security audit
      if: ${{ inputs.security-command != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm run ${{ inputs.security-command }}
      continue-on-error: true

    - name: Quality checks
      if: ${{ inputs.quality-command != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm run ${{ inputs.quality-command }}

    - name: Check if browser tests are needed
      id: browser-check
      shell: bash
      run: |
        if [[ "${{ inputs.test-command }}" != "" ]]; then
          echo "browser_tests_needed=true" >> $GITHUB_OUTPUT
          echo "🧪 Browser tests detected - setting up Playwright"
        else
          echo "browser_tests_needed=false" >> $GITHUB_OUTPUT
          echo "📋 No browser tests - skipping Playwright setup"
        fi

    - name: Check Playwright environment and setup browsers
      if: ${{ steps.browser-check.outputs.browser_tests_needed == 'true' }}
      id: playwright-check
      shell: bash
      run: |
        if [[ "${PLAYWRIGHT_BROWSERS_PATH:-}" == "/ms-playwright" ]]; then
          echo "✅ Using prebaked browsers at $PLAYWRIGHT_BROWSERS_PATH"
          echo "🔍 Available browsers:"
          find "$PLAYWRIGHT_BROWSERS_PATH" -maxdepth 3 -type f -name 'chrome' -o -name 'chromium' | head -3 || true
          echo "container_mode=true" >> $GITHUB_OUTPUT
        else
          echo "📦 Setting up browsers for regular runner..."
          echo "container_mode=false" >> $GITHUB_OUTPUT
        fi

    - name: Cache Playwright browsers
      if: ${{ steps.browser-check.outputs.browser_tests_needed == 'true' && steps.playwright-check.outputs.container_mode == 'false' }}
      id: cache-playwright
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.cache/ms-playwright
        key: >-
          playwright-${{ runner.os }}-
          v1-${{ hashFiles('packages/leenders-coaching-nl/package.json') }}-
          lock-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright browsers + Linux deps (non-container only)
      if: ${{ runner.os == 'Linux' && steps.browser-check.outputs.browser_tests_needed == 'true' && steps.playwright-check.outputs.container_mode == 'false' }}
      shell: bash
      env:
        PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/.cache/ms-playwright
      run: |
        set -eux
        sudo apt-get update
        pnpm dlx playwright install --with-deps chromium
        echo "Installed browsers:"
        find "$PLAYWRIGHT_BROWSERS_PATH" -maxdepth 3 -type f -name 'chrome' | xargs -r ls -l

    - name: Assert PW path
      if: ${{ steps.browser-check.outputs.browser_tests_needed == 'true' }}
      shell: bash
      run: |
        : "${PLAYWRIGHT_BROWSERS_PATH:?missing}"
        test -w "$(dirname "$PLAYWRIGHT_BROWSERS_PATH")"

    - name: Run comprehensive tests
      if: ${{ inputs.test-command != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PLAYWRIGHT_BROWSERS_PATH: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
      run: pnpm run ${{ inputs.test-command }}

    - name: Upload coverage to Codecov
      if: ${{ inputs.coverage-upload == 'true' && inputs.codecov-token != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ inputs.codecov-token }}
        files: packages/leenders-coaching-nl/coverage/lcov.info
        flags: unit,storybook
        name: combined
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.github-sha || 'latest' }}
        path: |
          packages/leenders-coaching-nl/coverage/
          packages/leenders-coaching-nl/test-results/
        retention-days: 30
