name: 'Run Tests & Quality Checks'
description: 'Runs tests, quality checks, security audits, and optionally uploads coverage'
inputs:
  test-command:
    description: 'Test command to run'
    required: false
    default: 'ci:test'
  quality-command:
    description: 'Quality check command to run'
    required: false
    default: 'ci:quality'
  security-command:
    description: 'Security check command to run'
    required: false
    default: 'ci:security'
  coverage-upload:
    description: 'Whether to upload coverage reports'
    required: false
    default: 'true'
  working-directory:
    description: 'Working directory for the job'
    required: false
    default: ''
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  pnpm-version:
    description: 'pnpm version to use'
    required: false
    default: '10.15.1'
  codecov-token:
    description: 'Codecov token for coverage uploads'
    required: false
    default: ''
  github-sha:
    description: 'GitHub SHA for artifact naming'
    required: false
    default: ''
  env:
    description: 'Environment variables to set (JSON string)'
    required: false
    default: '{}'
runs:
  using: 'composite'
  steps:
    # Checkout should be done explicitly in the workflow before calling this action

    - name: Setup environment
      uses: ./.github/actions/setup
      with:
        node-version: ${{ inputs.node-version }}
        pnpm-version: ${{ inputs.pnpm-version }}
        working-directory: ${{ inputs.working-directory }}

    - name: Set environment variables
      shell: bash
      env:
        INPUT_ENV: ${{ inputs.env }}
      run: |
        if [[ "${INPUT_ENV}" != "{}" ]]; then
          # Robustly handle any characters/newlines
          node -e '
            const env = JSON.parse(process.env.INPUT_ENV || "{}");
            const fs = require("fs");
            const out = Object.entries(env)
              .map(([k,v]) => `${k}<<__EOF__\n${v}\n__EOF__`)
              .join("\n") + "\n";
            fs.appendFileSync(process.env.GITHUB_ENV, out);
          '
        fi

    - name: Run security audit
      if: ${{ inputs.security-command != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm run ${{ inputs.security-command }}
      continue-on-error: true

    - name: Quality checks
      if: ${{ inputs.quality-command != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm run ${{ inputs.quality-command }}

    - name: Verify Playwright container setup
      shell: bash
      run: |
        echo "🔍 Verifying Playwright container environment..."
        echo "PLAYWRIGHT_BROWSERS_PATH: ${PLAYWRIGHT_BROWSERS_PATH:-not set}"
        echo "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: ${PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD:-not set}"

        if [[ "${PLAYWRIGHT_BROWSERS_PATH:-}" == "/ms-playwright" ]]; then
          echo "✅ Using prebaked browsers at $PLAYWRIGHT_BROWSERS_PATH"
          echo "📁 Browser directory contents:"
          ls -la "$PLAYWRIGHT_BROWSERS_PATH" || true
          echo "🔍 Available browsers:"
          find "$PLAYWRIGHT_BROWSERS_PATH" -maxdepth 3 -type f -name 'chrome' -o -name 'chromium' | head -5 || true
          
          # Verify browser executables are accessible
          if ! find "$PLAYWRIGHT_BROWSERS_PATH" -maxdepth 3 -type f -name 'chrome' -o -name 'chromium' | head -1 | xargs -I {} test -x {}; then
            echo "❌ Browser executables are not accessible"
            exit 1
          fi
          echo "✅ Browser executables are accessible"
        else
          echo "❌ Expected PLAYWRIGHT_BROWSERS_PATH to be /ms-playwright in container"
          echo "Current value: ${PLAYWRIGHT_BROWSERS_PATH:-not set}"
          echo "This action is designed to run in the Playwright container only."
          exit 1
        fi

    - name: Run comprehensive tests
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm run ${{ inputs.test-command }}

    - name: Upload coverage to Codecov
      if: ${{ inputs.coverage-upload == 'true' && inputs.codecov-token != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ inputs.codecov-token }}
        files: packages/leenders-coaching-nl/coverage/lcov.info
        flags: unit,storybook
        name: combined
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.github-sha || 'latest' }}
        path: |
          packages/leenders-coaching-nl/coverage/
          packages/leenders-coaching-nl/test-results/
        retention-days: 30
