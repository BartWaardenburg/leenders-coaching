name: 'Quality Gates & Security'

on:
  schedule:
    - cron: '0 6 * * *'
  push:
    branches: ['main']
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: ['main']
    types: [opened, synchronize, reopened, ready_for_review] # run on ALL PRs
  workflow_dispatch:
    inputs:
      severity:
        description: 'Minimum severity level for security audit'
        required: false
        default: 'moderate'
        type: choice
        options: ['info', 'low', 'moderate', 'high', 'critical']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.1'
  PNPM_HOME: /home/runner/.local/share/pnpm

jobs:
  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities }}
      info-count: ${{ steps.audit.outputs.info }}
      low-count: ${{ steps.audit.outputs.low }}
      moderate-count: ${{ steps.audit.outputs.moderate }}
      high-count: ${{ steps.audit.outputs.high }}
      critical-count: ${{ steps.audit.outputs.critical }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🔒 Run security audit'
        id: audit
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq >/dev/null 2>&1; }
          SEVERITY="${{ github.event.inputs.severity }}"
          : "${SEVERITY:=moderate}"

          if pnpm audit --audit-level "$SEVERITY" --json > audit-results.json 2>&1; then
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "info=0" >> $GITHUB_OUTPUT
            echo "low=0" >> $GITHUB_OUTPUT
            echo "moderate=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
            echo "critical=0" >> $GITHUB_OUTPUT
          else
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            if [ -f audit-results.json ] && jq -e . audit-results.json >/dev/null 2>&1; then
              INFO=$(jq -r '.metadata.vulnerabilities.info // 0' audit-results.json)
              LOW=$(jq -r '.metadata.vulnerabilities.low // 0' audit-results.json)
              MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json)
              HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json)
              CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-results.json)
              echo "info=$INFO" >> $GITHUB_OUTPUT
              echo "low=$LOW" >> $GITHUB_OUTPUT
              echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
              echo "high=$HIGH" >> $GITHUB_OUTPUT
              echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            else
              echo "info=0" >> $GITHUB_OUTPUT
              echo "low=0" >> $GITHUB_OUTPUT
              echo "moderate=0" >> $GITHUB_OUTPUT
              echo "high=0" >> $GITHUB_OUTPUT
              echo "critical=0" >> $GITHUB_OUTPUT
            fi
          fi
        continue-on-error: true

      - name: '📤 Upload audit results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.sha }}
          path: audit-results.json
          retention-days: 30

      # Always build a report for PRs (clean or with vulns)
      - name: '📊 Build security report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq >/dev/null 2>&1; }
          [ -f audit-results.json ] || echo '{}' > audit-results.json
          {
            echo "## 🔒 Security Audit Report"
            if [ "${{ steps.audit.outputs.vulnerabilities }}" = "true" ]; then
              echo
              echo "⚠️ **Security vulnerabilities detected** (threshold: \`${{ github.event.inputs.severity || 'moderate' }}\`)"
              echo
              echo "**Counts:**"
              echo "- Info: ${{ steps.audit.outputs.info }}"
              echo "- Low: ${{ steps.audit.outputs.low }}"
              echo "- Moderate: ${{ steps.audit.outputs.moderate }}"
              echo "- High: ${{ steps.audit.outputs.high }}"
              echo "- Critical: ${{ steps.audit.outputs.critical }}"
              echo
              if jq -e '.advisories and (.advisories | length > 0)' audit-results.json >/dev/null 2>&1; then
                jq -r '
                  .advisories
                  | to_entries
                  | sort_by([
                    (if .value.severity == "critical" then 0
                     elif .value.severity == "high" then 1
                     elif .value.severity == "moderate" then 2
                     elif .value.severity == "low" then 3 else 4 end),
                    .value.module_name
                  ])
                  | map(
                    "<details><summary>🔸 <b>" + .value.module_name + "</b> — " + (.value.severity|ascii_upcase) + "</summary>\n\n" +
                    "• **Title**: " + (.value.title // "N/A") + "\n" +
                    "• **Version**: " + (.value.findings[0].version // "Unknown") + "\n" +
                    "• **Patched**: `" + (.value.patched_versions // "N/A") + "`\n" +
                    "• **Vulnerable**: `" + (.value.vulnerable_versions // "N/A") + "`\n" +
                    "• **Ref**: " + (.value.url // "N/A") + "\n\n" +
                    "</details>"
                  )
                  | join("\n\n")
                ' audit-results.json
              else
                echo "_No advisory details available in audit output._"
              fi
            else
              echo
              echo "✅ **No vulnerabilities** at or above threshold \`${{ github.event.inputs.severity || 'moderate' }}\`."
            fi
            echo
            echo "*Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*"
          } > security-report.md

      - name: '💬 Sticky PR comment – Security Audit'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: security-audit
          number: ${{ github.event.pull_request.number }}
          path: security-report.md

  license-compliance:
    name: 'License Compliance'
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '📜 Generate license report file'
        run: |
          npx license-checker --summary > license-summary.txt || echo "license-checker not available" > license-summary.txt

      - name: '💬 Sticky PR comment – Licenses'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: license-compliance
          number: ${{ github.event.pull_request.number }}
          message: |
            ## 📜 License Compliance
            Below is the current license summary:
            ```text
            ${{ steps.generate_summary.outputs.noop }}
            ```
          path: license-summary.txt

      - name: '📤 Upload license report'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report-${{ github.sha }}
          path: license-summary.txt
          retention-days: 30

  dependency-analysis:
    name: 'Dependency Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '📊 Analyze dependencies'
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true

          pnpm run outdated | tee outdated.txt || echo "✅ All packages are up to date" | tee outdated.txt

          echo "" >> outdated.txt
          echo "📈 Package count by workspace:" >> outdated.txt
          echo "Root devDependencies: $(cat package.json | jq '.devDependencies | length')" >> outdated.txt
          echo "Frontend deps: $(cat packages/leenders-coaching-nl/package.json | jq '.dependencies | length')" >> outdated.txt
          echo "Studio deps: $(cat packages/studio-leenders-coaching-nl/package.json | jq '.dependencies | length')" >> outdated.txt

      - name: '🔍 Check for duplicate dependencies'
        run: pnpm run dedupe:check | tee dedupe.txt || echo "ℹ️ Some dependencies could be deduplicated" | tee -a dedupe.txt

      - name: '📊 Generate dependency tree'
        run: pnpm list --depth=2 > dependency-tree.txt || echo "Dependency tree generated with warnings" >> dependency-tree.txt

      - name: '🧾 Build dependency report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          {
            echo "## 📦 Dependency Analysis"
            echo
            echo "### Outdated"
            echo '```text'
            head -n 200 outdated.txt
            echo '```'
            echo
            echo "### Dedupe Check"
            echo '```text'
            head -n 120 dedupe.txt
            echo '```'
            echo
            echo "### Dependency Tree (depth=2, first 200 lines)"
            echo '```text'
            head -n 200 dependency-tree.txt
            echo '```'
          } > dependency-report.md

      - name: '💬 Sticky PR comment – Dependencies'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: dependency-analysis
          number: ${{ github.event.pull_request.number }}
          path: dependency-report.md

      - name: '📤 Upload dependency analysis'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-${{ github.sha }}
          path: |
            outdated.txt
            dedupe.txt
            dependency-tree.txt
          retention-days: 30

  code-quality:
    name: 'Code Quality Metrics'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🔍 ESLint analysis'
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          if pnpm --filter leenders-coaching-nl run lint:format > eslint-raw-output.txt 2>&1; then
            true
          else
            true
          fi
          sed -n '/^\[/,$p' eslint-raw-output.txt > eslint-results.json || echo "[]" > eslint-results.json

      - name: '📊 TypeScript strict check'
        run: pnpm --parallel run type-check 2>&1 | tee typescript-results.txt || echo "TypeScript issues found" | tee -a typescript-results.txt

      - name: '📈 Code complexity analysis'
        run: pnpm dlx complexity-report --output json --format json packages/*/src > complexity-analysis.json || echo "[]" > complexity-analysis.json

      - name: '🧾 Build code-quality report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          TOTAL_FILES=$(jq 'length' eslint-results.json)
          ERRORS=$(jq 'map(.errorCount) | add // 0' eslint-results.json)
          WARNINGS=$(jq 'map(.warningCount) | add // 0' eslint-results.json)
          {
            echo "## 🧹 Code Quality"
            echo
            echo "**ESLint** — files: ${TOTAL_FILES}, errors: ${ERRORS}, warnings: ${WARNINGS}"
            echo
            echo "Top files with issues:"
            echo '```text'
            jq -r '.[] | select(.errorCount>0 or .warningCount>0) | "\(.filePath | split("/") | last): \(.errorCount) errors, \(.warningCount) warnings"' eslint-results.json | head -n 20
            echo '```'
            echo
            echo "**TypeScript (strict)** — last 60 lines"
            echo '```text'
            tail -n 60 typescript-results.txt
            echo '```'
            echo
            echo "**Complexity (summary)**"
            echo '```json'
            jq '[.[] | {file: .file, maintainability: .maintainability}] | sort_by(.maintainability) | .[0:10]' complexity-analysis.json
            echo '```'
          } > code-quality-report.md

      - name: '💬 Sticky PR comment – Code Quality'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: code-quality
          number: ${{ github.event.pull_request.number }}
          path: code-quality-report.md

      - name: '📤 Upload quality metrics'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-${{ github.sha }}
          path: |
            eslint-results.json
            typescript-results.txt
            complexity-analysis.json
          retention-days: 30

  performance-benchmarks:
    name: 'Performance Benchmarks'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '⏱️ Build time benchmark'
        run: |
          start_time=$(date +%s); pnpm run build:frontend; end_time=$(date +%s); frontend_duration=$((end_time - start_time))
          start_time=$(date +%s); pnpm run build:studio;   end_time=$(date +%s); studio_duration=$((end_time - start_time))
          echo "{\"frontend_build_time\": $frontend_duration, \"studio_build_time\": $studio_duration}" > build-metrics.json

      - name: '📊 Bundle size analysis'
        run: pnpm --filter ./packages/leenders-coaching-nl run analyze:bundle

      - name: '🔍 Performance audit (non-Lighthouse)'
        run: pnpm --filter ./packages/leenders-coaching-nl run verify:performance

      - name: '📋 Capture bundle size summary'
        run: |
          if [ -d "packages/leenders-coaching-nl/.next/static" ]; then
            JS_SIZE=$(find packages/leenders-coaching-nl/.next/static/chunks -name "*.js" -exec du -ch {} + 2>/dev/null | tail -1 | cut -f1)
            CSS_SIZE=$(find packages/leenders-coaching-nl/.next/static/css -name "*.css" -exec du -ch {} + 2>/dev/null | tail -1 | cut -f1)
            echo "js=$JS_SIZE" >> $GITHUB_OUTPUT
            echo "css=$CSS_SIZE" >> $GITHUB_OUTPUT
          fi

      - name: '🧾 Build performance report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          {
            echo "## 🚀 Performance Benchmarks"
            echo
            echo "- Frontend build time: $(jq -r '.frontend_build_time' build-metrics.json)s"
            echo "- Studio build time: $(jq -r '.studio_build_time' build-metrics.json)s"
            echo
            echo "### Bundle size snapshot"
            echo "- Total JS size (chunks): ${{ steps.capture_bundle_size_summary.outputs.js || 'n/a' }}"
            echo "- Total CSS size: ${{ steps.capture_bundle_size_summary.outputs.css || 'n/a' }}"
          } > performance-report.md

      - name: '💬 Sticky PR comment – Performance'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: performance-benchmarks
          number: ${{ github.event.pull_request.number }}
          path: performance-report.md

      - name: '📤 Upload performance metrics'
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics-${{ github.sha }}
          path: |
            build-metrics.json
            packages/leenders-coaching-nl/.next/static/
          retention-days: 90

  quality-summary:
    name: 'Quality Summary'
    runs-on: ubuntu-latest
    needs:
      [
        security-audit,
        license-compliance,
        dependency-analysis,
        code-quality,
        performance-benchmarks,
      ]
    if: always()
    timeout-minutes: 5

    steps:
      - name: '📋 Generate quality report'
        run: |
          echo "## 🎯 Quality Gates Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-audit.outputs.vulnerabilities-found }}" = "true" ]; then
            echo "- ⚠️ **Security**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Security**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- ${{ needs.license-compliance.result == 'success' && '✅' || '❌' }} **License Compliance**: ${{ needs.license-compliance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.dependency-analysis.result == 'success' && '✅' || '❌' }} **Dependency Analysis**: ${{ needs.dependency-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.performance-benchmarks.result == 'success' && '✅' || '❌' }} **Performance Benchmarks**: ${{ needs.performance-benchmarks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: '💬 Sticky PR comment – Quality Gates'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: quality-gates
          number: ${{ github.event.pull_request.number }}
          message: |
            ## 🎯 Quality Gates (summary)
            - **Security:** ${{ needs.security-audit.outputs.vulnerabilities-found == 'true' && '⚠️ Vulnerabilities detected' || '✅ No vulnerabilities found' }}
            - **License Compliance:** ${{ needs.license-compliance.result == 'success' && '✅' || '❌' }}
            - **Dependency Analysis:** ${{ needs.dependency-analysis.result == 'success' && '✅' || '❌' }}
            - **Code Quality:** ${{ needs.code-quality.result == 'success' && '✅' || '❌' }}
            - **Performance:** ${{ needs.performance-benchmarks.result == 'success' && '✅' || '❌' }}

            *Generated by GitHub Actions Quality Gates*

      - name: '🚨 Fail on critical issues'
        if: needs.security-audit.outputs.vulnerabilities-found == 'true' && github.event.inputs.severity == 'critical'
        run: |
          echo "❌ Critical security vulnerabilities found!"
          exit 1
