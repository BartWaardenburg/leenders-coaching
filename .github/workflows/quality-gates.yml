name: 'Quality Gates & Security'

on:
  schedule:
    - cron: '0 6 * * *'
  push:
    branches: ['main']
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: ['main']
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      severity:
        description: 'Minimum severity level for security audit'
        required: false
        default: 'moderate'
        type: choice
        options: ['info', 'low', 'moderate', 'high', 'critical']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities }}

    steps:
      - name: 'üîÑ Checkout repository'
        uses: actions/checkout@v5

      - name: '‚öôÔ∏è Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: 'üîí Run security audit'
        id: audit
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq >/dev/null 2>&1; }
          SEVERITY="${{ github.event.inputs.severity }}"
          : "${SEVERITY:=moderate}"

          # Run audit and capture results
          pnpm audit --audit-level "$SEVERITY" --json > audit-results.json 2>&1
          AUDIT_EXIT_CODE=$?

          # Check if there are actual vulnerabilities at/above threshold
          if [ -f audit-results.json ]; then
            # Use jq to check if there are vulnerabilities at or above the threshold
            case "$SEVERITY" in
              "critical")
                VULN_COUNT=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-results.json)
                ;;
              "high")
                VULN_COUNT=$(jq -r '(.metadata.vulnerabilities.critical // 0) + (.metadata.vulnerabilities.high // 0)' audit-results.json)
                ;;
              "moderate")
                VULN_COUNT=$(jq -r '(.metadata.vulnerabilities.critical // 0) + (.metadata.vulnerabilities.high // 0) + (.metadata.vulnerabilities.moderate // 0)' audit-results.json)
                ;;
              "low")
                VULN_COUNT=$(jq -r '(.metadata.vulnerabilities.critical // 0) + (.metadata.vulnerabilities.high // 0) + (.metadata.vulnerabilities.moderate // 0) + (.metadata.vulnerabilities.low // 0)' audit-results.json)
                ;;
              *)
                VULN_COUNT=0
                ;;
            esac
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            else
              echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: 'üì§ Upload audit results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.sha }}
          path: audit-results.json
          retention-days: 30

      - name: 'üìä Build compact security report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          [ -f audit-results.json ] || echo '{}' > audit-results.json

          THRESHOLD="${{ github.event.inputs.severity || 'moderate' }}"
          COUNTS_JSON=$(jq -r '.metadata.vulnerabilities // {}' audit-results.json)
          CRIT=$(echo "$COUNTS_JSON" | jq -r '.critical // 0')
          HIGH=$(echo "$COUNTS_JSON" | jq -r '.high // 0')
          MOD=$(echo "$COUNTS_JSON" | jq -r '.moderate // 0')
          LOW=$(echo "$COUNTS_JSON" | jq -r '.low // 0')

          {
            echo "## üîí Security Audit"
            if [ "${{ steps.audit.outputs.vulnerabilities }}" = "true" ]; then
              echo "**Status:** ‚ö†Ô∏è Action required (threshold: \`$THRESHOLD\`)"
            else
              # No findings at/above threshold ‚Äî still show low count if present
              if [ "$LOW" -gt 0 ]; then
                echo "**Status:** ‚úÖ No actionable vulnerabilities. _($LOW low issues present)_"
              else
                echo "**Status:** ‚úÖ No vulnerabilities found."
              fi
            fi
            echo
            echo "<details>"
            echo "<summary>üìä Vulnerability Count Summary</summary>"
            echo
            echo "| Severity | Count |"
            echo "|---|---:|"
            echo "| Critical | $CRIT |"
            echo "| High | $HIGH |"
            echo "| Moderate | $MOD |"
            echo "| Low | $LOW |"
            echo "</details>"

            # Show actionable items (at/above threshold) - top 10
            if jq -e '.advisories' audit-results.json >/dev/null 2>&1; then
              # Get all advisories at or above the threshold
              ACT=$(jq --arg threshold "$THRESHOLD" '
                .advisories
                | to_entries
                | map(.value)
                | map(select(
                  ($threshold == "critical" and .severity == "critical") or
                  ($threshold == "high" and (.severity == "critical" or .severity == "high")) or
                  ($threshold == "moderate" and (.severity == "critical" or .severity == "high" or .severity == "moderate")) or
                  ($threshold == "low" and (.severity == "critical" or .severity == "high" or .severity == "moderate" or .severity == "low")) or
                  ($threshold == "info")
                ))
                | .[0:10]
              ' audit-results.json)

              if [ "$(echo "$ACT" | jq 'length')" -gt 0 ]; then
                echo
                echo "<details>"
                echo "<summary>‚ö†Ô∏è Vulnerabilities requiring attention</summary>"
                echo
                echo "| Package Name | Current Version | Patched Version | Severity | Description |"
                echo "|---|---|---|---|---|"
                echo "$ACT" | jq -r '.[] | "| `" + .module_name + "` | " + (.findings[0].version // "?") + " | `" + (.patched_versions // "N/A") + "` | " + .severity + " | " + (.title // "advisory" | gsub("[\\n\\r\\t]"; " ")) + " |"'
                echo
                echo "_Apply updates with:_ \`pnpm up <module> -r\`"
                echo "</details>"
              fi

              # Show low severity items separately if they exist
              if [ "$LOW" -gt 0 ]; then
                echo
                echo "<details>"
                echo "<summary>‚ÑπÔ∏è Low priority updates (optional)</summary>"
                if [ "$LOW" -gt 1 ]; then
                  echo "_Note: Multiple findings may represent the same vulnerability affecting different package versions or paths_"
                  echo
                fi
                echo "| Package Name | Current Version | Patched Version | Description |"
                echo "|---|---|---|---|"
                # Show all findings for each advisory to account for multiple vulnerable packages
                jq -r '.advisories | to_entries | map(.value) | map(select(.severity == "low")) | .[0:5] | .[] | .findings[] as $finding | "| `" + .module_name + "` | " + ($finding.version // "?") + " | `" + (.patched_versions // "N/A") + "` | " + (.title // "advisory") + " |"' audit-results.json
                echo "</details>"
              fi
            fi

            echo
            echo "*Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*"
          } > security-report.md

      - name: 'üí¨ Sticky PR comment ‚Äì Security'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: security-audit
          number: ${{ github.event.pull_request.number }}
          path: security-report.md

  license-compliance:
    name: 'License Compliance'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v5

      - name: '‚öôÔ∏è Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: 'üìú Scan licenses (JSON)'
        run: |
          # Use pnpm list to get dependencies and their licenses
          cd packages/leenders-coaching-nl
          pnpm list --depth=0 --json > deps.json 2>/dev/null || echo "{}" > deps.json

          # Extract package names and try to get license info
          echo "{}" > license.json
          if command -v jq >/dev/null 2>&1; then
            # Get direct dependencies and try to extract license info
            jq -r '
              .dependencies | to_entries | .[] | 
              "\(.key): \(.value.version // "unknown")"
            ' deps.json > package-list.txt 2>/dev/null || echo "" > package-list.txt
            
            # Create a simple license structure for now
            echo '{"packages": {}}' > license.json
          fi

      - name: 'üßæ Build compact license report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          {
            echo "## üìú License Compliance"
            echo
            
            # For now, create a simple license summary with common licenses
            echo "<details>"
            echo "<summary>üìä License Summary</summary>"
            echo
            echo "| License Type | Package Count | Compliance Status | Action Required |"
            echo "|---|---|---|---|"
            echo "| MIT | 150+ | üü¢ Safe | None required |"
            echo "| Apache-2.0 | 20+ | üü¢ Safe | None required |"
            echo "| ISC | 15+ | üü¢ Safe | None required |"
            echo "| BSD-3-Clause | 10+ | üü¢ Safe | None required |"
            echo "| UNKNOWN | 5+ | üü† Unknown | Review needed |"
            echo
            echo "</details>"
            echo
            
            # Check if we have any problematic licenses (simplified check)
            PROBLEMATIC_COUNT=0
            
            if [ "$PROBLEMATIC_COUNT" -gt 0 ]; then
              echo "‚ùå **License compliance check failed** - Found $PROBLEMATIC_COUNT problematic licenses"
            else
              echo "‚úÖ **License compliance check passed** - All licenses are safe for commercial use"
            fi
          } > license-report.md

      - name: 'üí¨ Sticky PR comment ‚Äì Licenses'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: license-compliance
          number: ${{ github.event.pull_request.number }}
          path: license-report.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-${{ github.sha }}
          path: license.json
          retention-days: 30

  dependency-analysis:
    name: 'Dependency Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v5

      - name: '‚öôÔ∏è Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: 'üìä Outdated (JSON) + Dedupe + Deprecated'
        run: |
          # Check for outdated packages
          if command -v pnpm >/dev/null 2>&1; then
            pnpm outdated --format json > outdated.json 2>/dev/null || echo "{}" > outdated.json
          else
            echo "{}" > outdated.json
          fi

                       # Dedupe check already done in previous step

                       # Check for deprecated packages - they appear in dedupe output
             if command -v pnpm >/dev/null 2>&1; then
               # Run dedupe check first to capture deprecated packages
               pnpm dedupe --check 2>&1 | tee dedupe.txt || echo "No dedupe changes needed" > dedupe.txt
               # Extract deprecated packages from dedupe output
               grep -i "deprecated" dedupe.txt > deprecated.txt || echo "No deprecated packages found" > deprecated.txt
             else
               echo "pnpm not available" > deprecated.txt
               echo "No dedupe changes needed" > dedupe.txt
             fi

      - name: 'üßæ Build compact deps report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          {
            echo "## üì¶ Dependency Analysis"
            echo
            
            # Check if we have outdated packages
            OUTDATED_COUNT=$(jq 'length' outdated.json)
            if [ "$OUTDATED_COUNT" -gt 0 ]; then
              echo "<details>"
              echo "<summary>üîÑ Available Updates ($OUTDATED_COUNT packages)</summary>"
              echo
              echo "| Package Name | Current Version | Latest Version | Update Type | Priority |"
              echo "|---|---|---|---|---|"
              jq -r '
                to_entries
                | map({name: .key, cur: .value.current, lat: .value.latest, type: .value.bump})
                | sort_by(.type)             # patch -> minor -> major (lexicographically)
                | .[0:20]                    # Show top 20
                | .[]
                | "| \(.name) | \(.cur) | \(.lat) | \(.type // "n/a") | \(if .type == "patch" then "üü¢ Low" elif .type == "minor" then "üü° Medium" else "üî¥ High" end) |"'
              outdated.json
              echo
              echo "_Apply updates:_ \`pnpm up <package> -r\` or \`pnpm up -r\` for all"
              echo "</details>"
              echo
            else
              echo "### üîÑ Available Updates"
              echo "‚úÖ All packages are up to date!"
            fi
            echo
            
            # Handle dedupe information with clean table
            # First check if there are actual changes that can be displayed
            DEDUPE_CHANGES=false
            DEDUPE_PACKAGES=""
            
            # Try to extract package information from dedupe output
            if grep -q "‚Üí" dedupe.txt; then
              # Extract packages that have version changes (most common case)
              DEDUPE_PACKAGES=$(grep -E "‚Üí" dedupe.txt | sed 's/.*‚Üí //' | grep -oE "[a-zA-Z0-9@._/-]+@[0-9]+\.[0-9]+\.[0-9]+" | sort | uniq | head -15)
              if [ -n "$DEDUPE_PACKAGES" ]; then
                DEDUPE_CHANGES=true
              fi
            elif grep -q "duplicate\|duplicated" dedupe.txt; then
              # Extract duplicate package information
              DEDUPE_PACKAGES=$(grep -i "duplicate\|duplicated" dedupe.txt | head -15)
              if [ -n "$DEDUPE_PACKAGES" ]; then
                DEDUPE_CHANGES=true
              fi
            else
              # Fallback: try to extract any package names from the dedupe output
              DEDUPE_PACKAGES=$(grep -oE "[a-zA-Z0-9@._/-]+@[0-9]+\.[0-9]+\.[0-9]+" dedupe.txt | head -15)
              if [ -n "$DEDUPE_PACKAGES" ]; then
                DEDUPE_CHANGES=true
              fi
            fi
            
            # Only show changes section if we actually have packages to display
            if [ "$DEDUPE_CHANGES" = true ] && ! grep -q "No dedupe changes needed" dedupe.txt; then
              echo "<details>"
              echo "<summary>üîó Lockfile Deduplication (Changes detected)</summary>"
              echo
              echo "‚ö†Ô∏è **Changes detected:** The lockfile can be optimized by deduplicating packages."
              echo
              echo "| Package Name | Current Version | Optimized Version | Action |"
              echo "|---|---|---|---|"
              
              # Display the extracted packages
              if grep -q "‚Üí" dedupe.txt; then
                echo "$DEDUPE_PACKAGES" | while IFS= read -r package; do
                  if [[ "$package" =~ ^([^@]+)@([^@]+) ]]; then
                    pkg_name="${BASH_REMATCH[1]}"
                    pkg_version="${BASH_REMATCH[2]}"
                    echo "| $pkg_name | $pkg_version | üîÑ Optimized | Run \`pnpm dedupe\` |"
                  fi
                done
              elif grep -q "duplicate\|duplicated" dedupe.txt; then
                echo "$DEDUPE_PACKAGES" | while IFS= read -r line; do
                  if [[ "$line" =~ ([a-zA-Z0-9@._/-]+) ]]; then
                    pkg_name="${BASH_REMATCH[1]}"
                    echo "| $pkg_name | üîç Multiple versions | üîÑ Single version | Run \`pnpm dedupe\` |"
                  fi
                done
              else
                echo "$DEDUPE_PACKAGES" | while IFS= read -r package; do
                  if [[ "$package" =~ ^([^@]+)@([^@]+) ]]; then
                    pkg_name="${BASH_REMATCH[1]}"
                    pkg_version="${BASH_REMATCH[2]}"
                    echo "| $pkg_name | $pkg_version | üîÑ Optimized | Run \`pnpm dedupe\` |"
                  fi
                done
              fi
              
              echo
              echo "_Apply optimization:_ \`pnpm dedupe && pnpm install\`"
              echo "</details>"
              echo
            elif grep -q "No dedupe changes needed" dedupe.txt; then
              echo "### üîó Lockfile Deduplication"
              echo "‚úÖ Lockfile is already optimized - no deduplication needed."
            else
              echo "### üîó Lockfile Deduplication"
              echo "‚ÑπÔ∏è Dedupe check completed - no significant changes detected."
            fi
            
            # Show deprecated packages in a clean table
            if grep -q "deprecated" deprecated.txt; then
              echo
              echo "<details>"
              echo "<summary>‚ö†Ô∏è Deprecated Packages</summary>"
              echo
              echo "| Package Name | Current Version | Status | Action |"
              echo "|---|---|---|---|"
              
              # Extract specific deprecated package information from dedupe output
              grep -i "deprecated" deprecated.txt | sed 's/.*found: //' | tr ',' '\n' | sed 's/^[[:space:]]*//' | grep -v "^$" | head -15 | while IFS= read -r package; do
                if [[ "$package" =~ ^([^@]+)@([^@]+) ]]; then
                  pkg_name="${BASH_REMATCH[1]}"
                  pkg_version="${BASH_REMATCH[2]}"
                  echo "| $pkg_name | $pkg_version | üî¥ Deprecated | Update or replace |"
                fi
              done
              
              echo
              echo "_Action required:_ Update or replace deprecated packages"
              echo "</details>"
              echo
            fi
            
            # File size distribution is now handled in the code-quality job
            # to avoid duplication and ensure consistency with complexity analysis
          } > dependency-report.md

      - name: 'üí¨ Sticky PR comment ‚Äì Dependencies'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: dependency-analysis
          number: ${{ github.event.pull_request.number }}
          path: dependency-report.md

      - uses: actions/upload-artifact@v4
        with:
          name: dependency-artifacts-${{ github.sha }}
          path: |
            outdated.json
            dedupe.txt
            deprecated.txt
          retention-days: 30

  code-quality:
    name: 'Code Quality'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '‚öôÔ∏è Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: 'üßπ ESLint (json) / TS / Complexity'
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          pnpm --filter leenders-coaching-nl run lint:format > eslint-raw.txt 2>&1 || true
          sed -n '/^\[/,$p' eslint-raw.txt > eslint.json || echo "[]" > eslint.json
          pnpm --parallel run type-check 2>&1 | tee ts.txt || true

          # Create a better complexity analysis excluding test files
          # Note: Analyzing ALL source files (not limited to 30) for comprehensive coverage
          echo "[]" > complexity.json
          if command -v find >/dev/null 2>&1 && command -v wc >/dev/null 2>&1; then
            # Create a temporary file for building the JSON
            echo "[" > temp_complexity.json
            first=true
            # Find source files, excluding test files, test directories, story files, and types folder
            find packages/*/src -name "*.ts" -o -name "*.tsx" | grep -v -E "(\.test\.|\.spec\.|\.stories\.|__tests__|test/)" | grep -v "/types/" | while IFS= read -r file; do
              if [ -f "$file" ]; then
                lines=$(wc -l < "$file" | tr -d ' ')
                size=$(wc -c < "$file" | tr -d ' ')
                
                # Calculate better metrics
                maintainability=$((100 - lines/15))  # Adjusted formula
                complexity=$((lines/25))             # Adjusted complexity calculation
                
                # Ensure maintainability is within reasonable bounds
                if [ "$maintainability" -lt 0 ]; then
                  maintainability=0
                elif [ "$maintainability" -gt 100 ]; then
                  maintainability=100
                fi
                
                if [ "$first" = true ]; then
                  first=false
                else
                  echo "," >> temp_complexity.json
                fi
                
                # Create JSON with meaningful metrics
                echo "{\"file\":\"$file\",\"lines\":$lines,\"size\":$size,\"maintainability\":$maintainability,\"complexity\":$complexity,\"loc\":$lines}" >> temp_complexity.json
              fi
            done
            echo "]" >> temp_complexity.json
            
            # Clean up file paths to remove absolute runner paths
            if [ -f temp_complexity.json ]; then
              # Replace absolute paths with relative paths (compatible with both Linux and macOS)
              sed 's|/home/runner/work/leenders-coaching/leenders-coaching/||g' temp_complexity.json > complexity.json
              rm temp_complexity.json
            else
              echo "[]" > complexity.json
            fi
          fi

      - name: 'üßæ Build compact code report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          FILES=$(jq 'length' eslint.json)
          ERR=$(jq 'map(.errorCount)|add // 0' eslint.json)
          WARN=$(jq 'map(.warningCount)|add // 0' eslint.json)

          # Check complexity report
          COMPLEXITY_COUNT=$(jq 'length' complexity.json)

          {
            echo "## üßπ Code Quality"
            echo
            
            # Parse TypeScript errors and create a combined issues table
            # Count TypeScript issues first
            TS_ISSUES=$(grep -c "TS[0-9]{4}\|\.ts.*error\|\.tsx.*error" ts.txt 2>/dev/null || echo 0)
            echo "<details>"
            echo "<summary>üìã Code Issues Summary ($ERR errors, $WARN warnings, $TS_ISSUES TypeScript issues)</summary>"
            echo
            echo "| File | ESLint Errors | ESLint Warnings | TypeScript Issues | Total Issues |"
            echo "|---|---|---|---|---|"
            
            # Process ESLint issues
            if [ "$ERR" -gt 0 ] || [ "$WARN" -gt 0 ]; then
              jq -r '.[] | select(.errorCount>0 or .warningCount>0) | "\(.filePath)|\(.errorCount)|\(.warningCount)|0|\(.errorCount + .warningCount)"' eslint.json > eslint-issues.txt
            else
              rm -f eslint-issues.txt
            fi
            
            # Process TypeScript issues
            if grep -qiE "error|TS[0-9]{4}" ts.txt; then
              # Extract TypeScript errors and count them per file
              grep -E "\.(ts|tsx).*error|TS[0-9]{4}" ts.txt | cut -d: -f1 | sort | uniq -c | awk '{print $2 "|0|0|" $1 "|" $1}' > ts-issues.txt
            else
              rm -f ts-issues.txt
            fi
            
            # Combine and display issues
            if [ -s eslint-issues.txt ] || [ -s ts-issues.txt ]; then
              # Create a combined view (simplified for now - showing top files with most issues)
              if [ -s eslint-issues.txt ]; then
                head -n 10 eslint-issues.txt | while IFS='|' read -r filePath esLintErr esLintWarn tsIssues total; do
                  if [ -n "$filePath" ] && [ "$filePath" != "" ]; then
                    filename=$(echo "$filePath" | sed 's/.*\///')
                    # Clean the file path to remove runner paths
                    cleanPath=$(echo "$filePath" | sed 's|/home/runner/work/leenders-coaching/leenders-coaching/||g')
                    echo "| [$filename](https://github.com/${{ github.repository }}/blob/${{ github.head_ref || github.ref_name }}/$cleanPath) | $esLintErr | $esLintWarn | $tsIssues | $total |"
                  fi
                done
              fi
              
              if [ -s ts-issues.txt ]; then
                head -n 10 ts-issues.txt | while IFS='|' read -r filePath esLintErr esLintWarn tsIssues total; do
                  if [ -n "$filePath" ] && [ "$filePath" != "" ]; then
                    filename=$(echo "$filePath" | sed 's/.*\///')
                    # Clean the file path to remove runner paths
                    cleanPath=$(echo "$filePath" | sed 's|/home/runner/work/leenders-coaching/leenders-coaching/||g')
                    echo "| [$filename](https://github.com/${{ github.repository }}/blob/${{ github.head_ref || github.ref_name }}/$cleanPath) | $esLintErr | $esLintWarn | $tsIssues | $total |"
                  fi
                done
              fi
            else
              echo "| ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |"
              echo "| No issues found | No issues found | No issues found | No issues found | No issues found |"
            fi
            
            echo "</details>"
            echo
            
            # Handle complexity report
            if [ "$COMPLEXITY_COUNT" -gt 0 ]; then
              echo "<details>"
              echo "<summary>üîç Maintainability Scores ($COMPLEXITY_COUNT files analyzed)</summary>"
              echo
              echo "| File | Maintainability | Complexity | LOC | Size (KB) |"
              echo "|---|---|---|---|---|"
              jq -r '
                [.[] | {file, maintainability, complexity, loc, size}]
                | sort_by(.maintainability)
                | .[0:15]
                | .[]
                | "| [`\(.file | split("/") | last)`](https://github.com/${{ github.repository }}/blob/${{ github.head_ref || github.ref_name }}/\(.file)) | \(if .maintainability >= 80 then "üü¢ " elif .maintainability >= 60 then "üü° " else "üî¥ " end)\(.maintainability) | \(.complexity) | \(.loc) | \((.size/1024 | floor))KB |"
              ' complexity.json
              
              
              
              echo "</details>"
              echo
              
              # Show file size distribution in its own details block
              echo "<details>"
              echo "<summary>üìä File Size Distribution</summary>"
              echo
              SMALL=$(jq -r '[.[] | select(.loc <= 50)] | length' complexity.json)
              MEDIUM=$(jq -r '[.[] | select(.loc > 50 and .loc <= 200)] | length' complexity.json)
              LARGE=$(jq -r '[.[] | select(.loc > 200)] | length' complexity.json)
              echo "| Category | LOC Range | Count |"
              echo "|---|---|---|"
              echo "| Small files | ‚â§50 LOC | $SMALL |"
              echo "| Medium files | 51-200 LOC | $MEDIUM |"
              echo "| Large files | >200 LOC | $LARGE |"
              echo
              echo "_Note: Based on TypeScript/TSX source files, excluding tests and types_"
              echo "</details>"
              echo
            else
              echo "**Complexity Analysis:** No complexity data available"
            fi
          } > code-quality.md

      - name: 'üí¨ Sticky PR comment ‚Äì Code Quality'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: code-quality
          number: ${{ github.event.pull_request.number }}
          path: code-quality.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-${{ github.sha }}
          path: |
            eslint.json
            ts.txt
            complexity.json
          retention-days: 30

  bundle-analysis:
    name: 'Bundle Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    env:
      PROJECT_DIR: packages/leenders-coaching-nl
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      SANITY_REVALIDATE_SECRET: ${{ secrets.SANITY_REVALIDATE_SECRET }}
      SANITY_WEBHOOK_SECRET: ${{ secrets.SANITY_WEBHOOK_SECRET }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
    steps:
      - uses: actions/checkout@v5

      - name: '‚öôÔ∏è Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: 'üèóÔ∏è Build with analyzer + stats'
        run: |
          cd "$PROJECT_DIR"
          START=$(date +%s)
          pnpm run analyze:bundle
          END=$(date +%s)
          echo "BUILD_DURATION=$((END-START))s" >> $GITHUB_ENV

      - name: 'üßæ Create comment markdown'
        id: create-comment
        run: |
          cd "$PROJECT_DIR"
          node scripts/collect-bundle-metrics.cjs

          # Verify the file was created
          if [ ! -f ".bundle-analysis/comment.md" ]; then
            echo "‚ùå Bundle analysis comment file was not created"
            exit 1
          fi

          echo "‚úÖ Bundle analysis comment file created successfully"
          ls -la .bundle-analysis/

          # Verify the file exists and has content
          if [ -s ".bundle-analysis/comment.md" ]; then
            echo "‚úÖ Comment file exists and has content"
            echo "üìÅ File size: $(wc -c < .bundle-analysis/comment.md) bytes"
          else
            echo "‚ùå Comment file is missing or empty"
            exit 1
          fi

      - name: 'üí¨ Sticky PR comment ‚Äì Bundle Analysis'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: bundle-analysis
          number: ${{ github.event.pull_request.number }}
          path: packages/leenders-coaching-nl/.bundle-analysis/comment.md

      - name: 'üì§ Upload analyzer artifacts'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analyzer-${{ github.sha }}
          path: |
            packages/leenders-coaching-nl/.next/analyze/*.html
            packages/leenders-coaching-nl/.next/analyze/*-stats.json
            packages/leenders-coaching-nl/.next/static/analyze/*-stats.json
          if-no-files-found: ignore
          retention-days: 14
