name: 'Quality Gates & Security'

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches: ['main']
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: ['main', 'develop']
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      severity:
        description: 'Minimum severity level for security audit'
        required: false
        default: 'moderate'
        type: choice
        options:
          - 'info'
          - 'low'
          - 'moderate'
          - 'high'
          - 'critical'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.0'
  PNPM_HOME: /home/runner/.local/share/pnpm

jobs:
  # Dependency security audit
  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🔒 Run security audit'
        id: audit
        run: |
          SEVERITY="${{ github.event.inputs.severity || 'moderate' }}"
          echo "Running security audit with severity: $SEVERITY"

          # Run audit and capture output (redirect stderr to avoid npm script headers)
          if pnpm audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "✅ No security vulnerabilities found"
          else
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "⚠️ Security vulnerabilities detected"
            
            # Parse and display vulnerabilities
            if [ -f audit-results.json ]; then
              echo "📊 Vulnerability Summary:"
              cat audit-results.json | jq -r '.metadata.vulnerabilities // empty'
            fi
          fi
        continue-on-error: true

      - name: '📤 Upload audit results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.sha }}
          path: audit-results.json
          retention-days: 30

      - name: '📊 Generate security report'
        if: steps.audit.outputs.vulnerabilities == 'true' && github.event_name == 'pull_request'
        run: |
          echo "🔍 Generating detailed security report..."

          if [ -f audit-results.json ]; then
            # Extract vulnerability summary
            VULN_SUMMARY=$(cat audit-results.json | jq -r '.metadata.vulnerabilities | "**Vulnerabilities Found:**\n- Info: \(.info)\n- Low: \(.low)\n- Moderate: \(.moderate)\n- High: \(.high)\n- Critical: \(.critical)"')
            
            # Extract detailed vulnerability information
            VULN_DETAILS=$(cat audit-results.json | jq -r '
              .advisories | to_entries[] | 
              "### \(.value.title)\n" +
              "- **Severity:** \(.value.severity)\n" +
              "- **CVE:** \(.value.cves | join(", "))\n" +
              "- **Module:** \(.value.module_name)\n" +
              "- **Vulnerable Versions:** \(.value.vulnerable_versions)\n" +
              "- **Patched Versions:** \(.value.patched_versions)\n" +
              "- **Recommendation:** \(.value.recommendation)\n" +
              "- **Overview:** \(.value.overview | split("\n") | .[0:3] | join("\n"))\n" +
              "- **References:** \(.value.url)\n"
            ')
            
            # Create the full report
            echo "## 🔒 Security Audit Report" > security-report.md
            echo "" >> security-report.md
            echo "⚠️ **Security vulnerabilities detected in dependencies**" >> security-report.md
            echo "" >> security-report.md
            echo "$VULN_SUMMARY" >> security-report.md
            echo "" >> security-report.md
            echo "### 📋 Detailed Findings" >> security-report.md
            echo "" >> security-report.md
            echo "$VULN_DETAILS" >> security-report.md
            echo "" >> security-report.md
            echo "### 🔧 Next Steps" >> security-report.md
            echo "" >> security-report.md
            echo "1. **Review the vulnerabilities** above and assess their impact on your application" >> security-report.md
            echo "2. **Update affected dependencies** to their patched versions where possible" >> security-report.md
            echo "3. **Consider using dependency updates** tools like Renovate or Dependabot" >> security-report.md
            echo "4. **Monitor for new patches** and update accordingly" >> security-report.md
            echo "" >> security-report.md
            echo "### 📊 Full Report" >> security-report.md
            echo "" >> security-report.md
            echo "For complete audit details, check the workflow artifacts or run \`pnpm audit\` locally." >> security-report.md
            echo "" >> security-report.md
            echo "---" >> security-report.md
            echo "*Generated by GitHub Actions Security Audit*" >> security-report.md
            
            echo "✅ Security report generated successfully"
          else
            echo "⚠️ No audit results file found"
          fi

      - name: '💬 Post security report'
        if: steps.audit.outputs.vulnerabilities == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('🔍 Attempting to post security report...');
              
              let reportContent = '';
              if (fs.existsSync('security-report.md')) {
                reportContent = fs.readFileSync('security-report.md', 'utf8');
              } else {
                reportContent = '⚠️ **Security Alert**: Vulnerabilities detected in dependencies. Please review the audit results in the workflow logs.';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
              console.log('✅ Security report posted successfully');
            } catch (error) {
              console.error('❌ Failed to post security report:', error.message);
              console.error('🔍 Error details:', JSON.stringify(error, null, 2));
              // Don't fail the workflow if comment posting fails
            }

  # License compliance check
  license-compliance:
    name: 'License Compliance'
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '📜 Generate license report'
        run: |
          echo "📋 Generating license compliance report..."
          npx license-checker --summary > license-summary.txt || echo "License checker not available, skipping..."

          if [ -f license-summary.txt ]; then
            echo "📊 License Summary:"
            cat license-summary.txt
          fi

      - name: '📤 Upload license report'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report-${{ github.sha }}
          path: license-summary.txt
          retention-days: 30

  # Dependency analysis and updates
  dependency-analysis:
    name: 'Dependency Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '📊 Analyze dependencies'
        run: |
          echo "📦 Dependency Analysis Report"
          echo "=========================="

          echo "🔍 Checking for outdated packages..."
          pnpm run outdated || echo "✅ All packages are up to date"

          echo ""
          echo "📈 Package count by workspace:"
          echo "Root: $(cat package.json | jq '.devDependencies | length')"
          echo "Frontend: $(cat packages/leenders-coaching-nl/package.json | jq '.dependencies | length')"
          echo "Studio: $(cat packages/studio-leenders-coaching-nl/package.json | jq '.dependencies | length')"

      - name: '🔍 Check for duplicate dependencies'
        run: pnpm run dedupe:check || echo "ℹ️ Some dependencies could be deduplicated"

      - name: '📊 Generate dependency tree'
        run: pnpm list --depth=2 > dependency-tree.txt || echo "Dependency tree generated with warnings"

      - name: '📤 Upload dependency analysis'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-${{ github.sha }}
          path: dependency-tree.txt
          retention-days: 30

  # Code quality metrics
  code-quality:
    name: 'Code Quality Metrics'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🔍 ESLint analysis'
        run: |
          echo "🔍 Running comprehensive ESLint analysis..."

          # Run ESLint and capture output, allowing it to fail (use direct command to avoid npm script headers)
          if pnpm --filter leenders-coaching-nl run lint:format > eslint-raw-output.txt 2>&1; then
            echo "✅ No ESLint issues found"
            ESLINT_STATUS="success"
          else
            echo "⚠️ ESLint issues detected"
            ESLINT_STATUS="issues"
          fi

          # Extract JSON from the output (skip pnpm wrapper lines)
          if [ -f eslint-raw-output.txt ]; then
            # Find the line that starts with '[' (beginning of JSON array) and extract from there
            sed -n '/^\[/,$p' eslint-raw-output.txt > eslint-results.json
            
            # Validate and parse JSON output
            if jq empty eslint-results.json 2>/dev/null; then
              echo "📊 ESLint Summary:"
              
              # Count files with errors and warnings
              TOTAL_FILES=$(cat eslint-results.json | jq 'length')
              ERROR_COUNT=$(cat eslint-results.json | jq 'map(.errorCount) | add // 0')
              WARNING_COUNT=$(cat eslint-results.json | jq 'map(.warningCount) | add // 0')
              
              echo "Files analyzed: $TOTAL_FILES"
              echo "Total errors: $ERROR_COUNT"
              echo "Total warnings: $WARNING_COUNT"
              
              # Show files with issues
              if [ "$ERROR_COUNT" -gt 0 ] || [ "$WARNING_COUNT" -gt 0 ]; then
                echo ""
                echo "Files with issues:"
                cat eslint-results.json | jq -r '.[] | select(.errorCount > 0 or .warningCount > 0) | "  - \(.filePath | split("/") | last): \(.errorCount) errors, \(.warningCount) warnings"'
              fi
            else
              echo "❌ Failed to extract valid ESLint JSON from output"
              echo "Raw output:"
              cat eslint-raw-output.txt 2>/dev/null || echo "No output file generated"
            fi
          else
            echo "❌ No ESLint output file generated"
          fi

      - name: '📊 TypeScript strict check'
        run: pnpm --parallel run type-check 2>&1 | tee typescript-results.txt || echo "TypeScript issues found"

      - name: '📈 Code complexity analysis'
        run: pnpm dlx complexity-report --output json --format json packages/*/src | sort -nr -k2 > complexity-analysis.txt

      - name: '📤 Upload quality metrics'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-${{ github.sha }}
          path: |
            eslint-results.json
            typescript-results.txt
            complexity-analysis.txt
          retention-days: 30

  # Performance benchmarks
  performance-benchmarks:
    name: 'Performance Benchmarks'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '⏱️ Build time benchmark'
        run: |
          echo "⏱️ Measuring build performance..."

          # Frontend build time
          start_time=$(date +%s)
          pnpm run build:frontend
          end_time=$(date +%s)
          frontend_duration=$((end_time - start_time))
          echo "Frontend build: ${frontend_duration}s"

          # Studio build time
          start_time=$(date +%s)
          pnpm run build:studio
          end_time=$(date +%s)
          studio_duration=$((end_time - start_time))
          echo "Studio build: ${studio_duration}s"

          # Save metrics
          echo "{\"frontend_build_time\": $frontend_duration, \"studio_build_time\": $studio_duration}" > build-metrics.json

      - name: '📊 Bundle size analysis'
        run: pnpm run analyze:bundle

      - name: '🔍 Performance audit'
        run: pnpm run perf:audit

      - name: '📋 Capture bundle size summary'
        run: |
          echo "📦 Bundle Size Analysis Summary"
          echo "=============================="

          # Check if build was successful
          if [ -d "packages/leenders-coaching-nl/.next" ]; then
            echo "✅ Frontend build completed successfully"
            
            # Capture basic build stats
            if [ -d "packages/leenders-coaching-nl/.next/static/chunks" ]; then
              echo ""
              echo "📊 Chunk Statistics:"
              echo "Total JS chunks: $(find packages/leenders-coaching-nl/.next/static/chunks -name "*.js" | wc -l)"
              echo "Total CSS files: $(find packages/leenders-coaching-nl/.next/static/css -name "*.css" | wc -l)"
              
              # Calculate total sizes
              JS_SIZE=$(find packages/leenders-coaching-nl/.next/static/chunks -name "*.js" -exec du -ch {} + | tail -1 | cut -f1)
              CSS_SIZE=$(find packages/leenders-coaching-nl/.next/static/css -name "*.css" -exec du -ch {} + | tail -1 | cut -f1)
              
              echo "Total JS size: $JS_SIZE"
              echo "Total CSS size: $CSS_SIZE"
            fi
            
            # Note: Bundle size limits are now enforced by the Size Limit GitHub Action
            echo ""
            echo "📏 Bundle size limits are enforced by the Size Limit GitHub Action on PRs"
            
            # Check for analyze directory (if bundle analyzer was used)
            if [ -d "packages/leenders-coaching-nl/.next/analyze" ]; then
              echo ""
              echo "📁 Bundle analysis files available in packages/leenders-coaching-nl/.next/analyze/"
              ls -la packages/leenders-coaching-nl/.next/analyze/ || echo "No analysis files found"
            fi
          else
            echo "❌ Frontend build failed or not found"
            exit 1
          fi

      - name: '📤 Upload performance metrics'
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics-${{ github.sha }}
          path: |
            build-metrics.json
            packages/leenders-coaching-nl/.next/static/
          retention-days: 90

  # Summary report
  quality-summary:
    name: 'Quality Summary'
    runs-on: ubuntu-latest
    needs:
      [security-audit, license-compliance, dependency-analysis, code-quality]
    if: always()
    timeout-minutes: 5

    steps:
      - name: '📋 Generate quality report'
        run: |
          echo "## 🎯 Quality Gates Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security status
          if [ "${{ needs.security-audit.outputs.vulnerabilities-found }}" = "true" ]; then
            echo "- ⚠️ **Security**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Security**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

          # Job statuses
          echo "- ${{ needs.license-compliance.result == 'success' && '✅' || '❌' }} **License Compliance**: ${{ needs.license-compliance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.dependency-analysis.result == 'success' && '✅' || '❌' }} **Dependency Analysis**: ${{ needs.dependency-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: '🚨 Fail on critical issues'
        if: needs.security-audit.outputs.vulnerabilities-found == 'true' && github.event.inputs.severity == 'critical'
        run: |
          echo "❌ Critical security vulnerabilities found!"
          exit 1
