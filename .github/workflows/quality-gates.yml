name: 'Quality Gates & Security'

on:
  schedule:
    - cron: '0 6 * * *'
  push:
    branches: ['main']
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: ['main']
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      severity:
        description: 'Minimum severity level for security audit'
        required: false
        default: 'moderate'
        type: choice
        options: ['info', 'low', 'moderate', 'high', 'critical']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  # Setup environment
  setup:
    uses: ./.github/workflows/setup.yml

  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    outputs:
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities }}

    steps:
      - name: 'üîÑ Checkout repository'
        uses: actions/checkout@v5

      - name: 'üì• Install dependencies'
        run: pnpm run ci:install:frozen

      - name: 'üîí Run security audit'
        id: audit
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq >/dev/null 2>&1; }
          SEVERITY="${{ github.event.inputs.severity }}"
          : "${SEVERITY:=moderate}"
          if pnpm audit --audit-level "$SEVERITY" --json > audit-results.json 2>&1; then
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
          else
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: 'üì§ Upload audit results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.sha }}
          path: audit-results.json
          retention-days: 30

      - name: 'üìä Build compact security report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          [ -f audit-results.json ] || echo '{}' > audit-results.json

          THRESHOLD="${{ github.event.inputs.severity || 'moderate' }}"
          COUNTS_JSON=$(jq -r '.metadata.vulnerabilities // {}' audit-results.json)
          CRIT=$(echo "$COUNTS_JSON" | jq -r '.critical // 0')
          HIGH=$(echo "$COUNTS_JSON" | jq -r '.high // 0')
          MOD=$(echo "$COUNTS_JSON" | jq -r '.moderate // 0')
          LOW=$(echo "$COUNTS_JSON" | jq -r '.low // 0')

          {
            echo "## üîí Security Audit"
            if [ "${{ steps.audit.outputs.vulnerabilities }}" = "true" ]; then
              echo "**Status:** ‚ö†Ô∏è Action required (threshold: \`$THRESHOLD\`)"
            else
              # No findings at/above threshold ‚Äî still show low count if present
              if [ "$LOW" -gt 0 ]; then
                echo "**Status:** ‚úÖ No actionable vulnerabilities. _($LOW low issues present)_"
              else
                echo "**Status:** ‚úÖ No vulnerabilities found."
              fi
            fi
            echo
            echo "| Severity | Count |"
            echo "|---|---:|"
            echo "| Critical | $CRIT |"
            echo "| High | $HIGH |"
            echo "| Moderate | $MOD |"
            echo "| Low | $LOW |"

            # Show only actionable items (hide low) - top 8
            if jq -e '.advisories' audit-results.json >/dev/null 2>&1; then
              ACT=$(jq '
                .advisories
                | to_entries
                | map(.value)
                | map(select(.severity != "low"))
                | .[0:8]
              ' audit-results.json)

              if [ "$(echo "$ACT" | jq 'length')" -gt 0 ]; then
                echo
                echo "### ‚ñ∂Ô∏è Recommended updates"
                echo
                echo "| Module | Current | Patched range | Link |"
                echo "|---|---|---|---|"
                echo "$ACT" | jq -r '.[] | "| `" + .module_name + "` | " + (.findings[0].version // "?") + " | `" + (.patched_versions // "N/A") + "` | [" + (.title // "advisory") + "](" + (.url // "#") + ") |"'
                echo
                echo "_Apply with:_ \`pnpm up <module> -r\`"
              fi
            fi

            echo
            echo "*Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*"
          } > security-report.md

      - name: 'üí¨ Sticky PR comment ‚Äì Security'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: security-audit
          number: ${{ github.event.pull_request.number }}
          path: security-report.md

  license-compliance:
    name: 'License Compliance'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v5
      - name: 'üìú Scan licenses (JSON)'
        run: |
          npx license-checker --json --production --relativeLicensePath > license.json || echo "{}" > license.json

      - name: 'üßæ Build compact license report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          {
            echo "## üìú License Compliance"
            echo
            # Flag only problematic licenses
            echo "### Flagged licenses"
            jq -r '
              to_entries
              | map({pkg: .key, lic: (.value.licenses // "UNKNOWN")})
              | map(select(.lic|test("(GPL|AGPL|LGPL|SSPL|BUSL|Commons Clause)"; "i") or .lic=="UNKNOWN" or .lic|test("Proprietary"; "i")))
              | if length==0
                  then "‚úÖ No GPL/AGPL/LGPL/SSPL/BUSL/Commons-Clause/Proprietary/UNKNOWN licenses found."
                 else (["| Package | License |","|---|---|"] + (.[0:20] | map("| `\(.pkg)` | `\(.lic)` |"))) | .[] 
                end
            ' license.json
          } > license-report.md

      - name: 'üí¨ Sticky PR comment ‚Äì Licenses'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: license-compliance
          number: ${{ github.event.pull_request.number }}
          path: license-report.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-${{ github.sha }}
          path: license.json
          retention-days: 30

  dependency-analysis:
    name: 'Dependency Analysis'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v5
      - name: 'üì• Install deps'
        run: pnpm run ci:install:frozen

      - name: 'üìä Outdated (JSON) + Dedupe'
        run: |
          pnpm outdated --format json > outdated.json || echo "{}" > outdated.json
          pnpm dedupe --check | tee dedupe.txt || true

      - name: 'üßæ Build compact deps report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          {
            echo "## üì¶ Dependency Analysis"
            echo
            echo "### Top updates"
            echo "| Package | Current | Latest | Type |"
            echo "|---|---|---|---|"
            jq -r '
              to_entries
              | map({name: .key, cur: .value.current, lat: .value.latest, type: .value.bump})
              | sort_by(.type)             # patch -> minor -> major (lexicographically), tweak if you prefer major-first
              | .[0:10]
              | .[]
              | "| `\(.name)` | \(.cur) | \(.lat) | \(.type // "n/a") |"
            ' outdated.json
            echo
            if grep -q 'Dedupe --check found' dedupe.txt; then
              echo "### Dedupe"
              echo '```text'
              grep ' ‚Üí ' dedupe.txt | head -n 10
              echo '```'
              echo "_Apply:_ \`pnpm dedupe && pnpm install\`"
            else
              echo "### Dedupe"
              echo "‚úÖ No lockfile dedupe changes required."
            fi
          } > dependency-report.md

      - name: 'üí¨ Sticky PR comment ‚Äì Dependencies'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: dependency-analysis
          number: ${{ github.event.pull_request.number }}
          path: dependency-report.md

      - uses: actions/upload-artifact@v4
        with:
          name: dependency-artifacts-${{ github.sha }}
          path: |
            outdated.json
            dedupe.txt
          retention-days: 30

  code-quality:
    name: 'Code Quality'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: 'üì• Install deps'
        run: pnpm run ci:install:frozen

      - name: 'üßπ ESLint (json) / TS / Complexity'
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          pnpm --filter leenders-coaching-nl run lint:format > eslint-raw.txt 2>&1 || true
          sed -n '/^\[/,$p' eslint-raw.txt > eslint.json || echo "[]" > eslint.json
          pnpm --parallel run type-check 2>&1 | tee ts.txt || true
          pnpm dlx complexity-report --output json --format json packages/*/src > complexity.json || echo "[]" > complexity.json

      - name: 'üßæ Build compact code report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq >/dev/null 2>&1
          FILES=$(jq 'length' eslint.json)
          ERR=$(jq 'map(.errorCount)|add // 0' eslint.json)
          WARN=$(jq 'map(.warningCount)|add // 0' eslint.json)
          {
            echo "## üßπ Code Quality"
            echo
            echo "**ESLint:** $ERR errors, $WARN warnings (across $FILES files)"
            if [ "$ERR" -gt 0 ] || [ "$WARN" -gt 0 ]; then
              echo
              echo "Top files with issues:"
              echo '```text'
              jq -r '.[] | select(.errorCount>0 or .warningCount>0) | "\(.filePath | split("/") | last): \(.errorCount) errors, \(.warningCount) warnings"' eslint.json | head -n 10
              echo '```'
            fi
            echo
            if grep -qiE "error|TS[0-9]{4}" ts.txt; then
              echo "**TypeScript:** issues detected (last 40 lines)"
              echo '```text'; tail -n 40 ts.txt; echo '```'
            else
              echo "**TypeScript:** ‚úÖ no issues."
            fi
            echo
            echo "**Complexity:** 10 lowest maintainability scores"
            echo '```json'
            jq '[.[] | {file: .file, maintainability: .maintainability}] | sort_by(.maintainability) | .[0:10]' complexity.json
            echo '```'
          } > code-quality.md

      - name: 'üí¨ Sticky PR comment ‚Äì Code Quality'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: code-quality
          number: ${{ github.event.pull_request.number }}
          path: code-quality.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-${{ github.sha }}
          path: |
            eslint.json
            ts.txt
            complexity.json
          retention-days: 30

  performance-benchmarks:
    name: 'Performance Benchmarks'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20
    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
    steps:
      - uses: actions/checkout@v5
      - name: 'üì• Install deps'
        run: pnpm run ci:install:frozen

      # One build with analyzer ON (captures reports + sizes)
      - name: 'üèóÔ∏è Build (with bundle analyzer)'
        id: build_analyze
        run: |
          START=$(date +%s)
          pnpm --filter ./packages/leenders-coaching-nl run analyze:bundle
          END=$(date +%s)
          echo "duration=$((END-START))" >> $GITHUB_OUTPUT

      - name: 'üîç Size-Limit gate (does not fail PR comment)'
        continue-on-error: true
        run: pnpm --filter ./packages/leenders-coaching-nl run verify:performance:ci

      - name: 'üìä Bundle snapshot'
        id: bundle_snapshot
        run: |
          JS_SIZE=$(find packages/leenders-coaching-nl/.next/static/chunks -name "*.js" -exec du -ch {} + 2>/dev/null | tail -1 | cut -f1)
          CSS_SIZE=$(find packages/leenders-coaching-nl/.next/static/css -name "*.css" -exec du -ch {} + 2>/dev/null | tail -1 | cut -f1)
          echo "js=${JS_SIZE:-n/a}"   >> $GITHUB_OUTPUT
          echo "css=${CSS_SIZE:-n/a}" >> $GITHUB_OUTPUT

      - name: 'üßæ Build compact perf report (PRs)'
        if: github.event_name == 'pull_request'
        run: |
          {
            echo "## üöÄ Performance"
            echo
            echo "| Metric | Value |"
            echo "|---|---:|"
            echo "| Build (frontend, ANALYZE on) | ${{ steps.build_analyze.outputs.duration || 'n/a' }}s |"
            echo "| Total JS (chunks) | ${{ steps.bundle_snapshot.outputs.js || 'n/a' }} |"
            echo "| Total CSS | ${{ steps.bundle_snapshot.outputs.css || 'n/a' }} |"
            echo
            echo "üìä **Bundle Analysis:** HTML reports available in artifact \`bundle-analyzer-${{ github.sha }}\`"
          } > performance.md

      - name: 'üí¨ Sticky PR comment ‚Äì Performance'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: performance-benchmarks
          number: ${{ github.event.pull_request.number }}
          path: performance.md

      - name: 'üìù Write perf.json (for artifact)'
        run: |
          printf '{"frontend":%s,"js":"%s","css":"%s"}\n' \
            "${{ steps.build_analyze.outputs.duration || 'null' }}" \
            "${{ steps.bundle_snapshot.outputs.js || 'n/a' }}" \
            "${{ steps.bundle_snapshot.outputs.css || 'n/a' }}" > perf.json

      - name: 'üì§ Upload bundle analyzer report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analyzer-${{ github.sha }}
          path: packages/leenders-coaching-nl/.next/analyze/
          if-no-files-found: ignore # prevents failures when folder missing
          retention-days: 14

      - uses: actions/upload-artifact@v4
        with:
          name: performance-${{ github.sha }}
          path: perf.json
          retention-days: 90

  quality-summary:
    name: 'Quality Summary'
    runs-on: ubuntu-latest
    needs:
      [
        security-audit,
        license-compliance,
        dependency-analysis,
        code-quality,
        performance-benchmarks,
      ]
    if: always()
    steps:
      - name: 'üí¨ Sticky PR comment ‚Äì Quality Gates'
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: quality-gates
          number: ${{ github.event.pull_request.number }}
          message: |
            ## üéØ Quality Gates
            - **Security:** ${{ needs.security-audit.outputs.vulnerabilities-found == 'true' && '‚ö†Ô∏è Action required' || '‚úÖ Clear' }}
            - **Licenses:** ‚úÖ Scanned (see comment)
            - **Dependencies:** ‚úÖ Scanned (see comment)
            - **Code Quality:** ‚úÖ Scanned (see comment)
            - **Performance:** ‚úÖ Scanned (see comment)
