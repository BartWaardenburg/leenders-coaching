name: 'Bundle Size Analysis & Limits'

on:
  pull_request:
    branches: ['main']
    paths:
      - 'packages/leenders-coaching-nl/src/**'
      - 'packages/leenders-coaching-nl/package.json'
      - 'packages/leenders-coaching-nl/.size-limit.json'
      - 'packages/leenders-coaching-nl/next.config.ts'
      - 'packages/leenders-coaching-nl/tailwind.config.ts'
      - 'pnpm-lock.yaml'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bundle-analysis:
    name: '📊 Bundle Size Analysis & Limits'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '⚙️ Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: '🏗️ Build frontend'
        run: pnpm --filter leenders-coaching-nl run build

      # Note: This step runs size-limit and captures results for analysis
      # The workflow now correctly uses the actual pass/fail status from size-limit results
      - name: '📊 Run Size Limit (soft-fail)'
        id: sizelimit
        working-directory: packages/leenders-coaching-nl
        run: |
          set -e
          mkdir -p .bundle-analysis
          set +e
          pnpm exec size-limit --json > .bundle-analysis/size-results.json
          code=$?
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"
          # always succeed here; comments/summary will reflect pass/fail
          exit 0

      - name: '⬇️ Checkout main as baseline'
        uses: actions/checkout@v5
        with:
          ref: main
          path: baseline

      - name: '⚙️ Setup Environment (baseline)'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: baseline

      - name: '🏗️ Build frontend (baseline)'
        working-directory: baseline
        run: pnpm --filter leenders-coaching-nl run build

      - name: '📏 Run size-limit (baseline)'
        working-directory: baseline/packages/leenders-coaching-nl
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
          SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        run: |
          OUT="$GITHUB_WORKSPACE/packages/leenders-coaching-nl/.bundle-analysis/size-results-main.json"
          # Don't fail if baseline exceeds limits - we just want the measurements
          set +e
          pnpm exec size-limit --json > "$OUT" 2>/dev/null
          # Always exit successfully - we're just collecting baseline data
          exit 0

      - name: '🔍 Generate Detailed Bundle Analysis (from JSON)'
        working-directory: packages/leenders-coaching-nl
        run: |
          node -e "
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('.bundle-analysis/size-results.json', 'utf8'));
            const cfg = JSON.parse(fs.readFileSync('.size-limit.json', 'utf8'));
            const cfgByName = new Map(cfg.map(c => [c.name, c]));

            const humanBytes = n => (n >= 1024 ? (n/1024).toFixed(0)+' KB' : n+' B');
            
            // Improved logic to properly handle time vs size metrics and calculate pass/fail status

            const rows = results.map(r => {
              const c = cfgByName.get(r.name) || {};
              const limitStr = c.limit || (typeof r.sizeLimit === 'number' ? humanBytes(r.sizeLimit) : '-');
              
              // Better detection of time-based metrics - prioritize limit format over running value
              const isTime = (typeof limitStr === 'string' && limitStr.endsWith('ms')) ||
                            (typeof limitStr === 'string' && limitStr.endsWith('s')) ||
                            r.name.toLowerCase().includes('time') ||
                            r.name.toLowerCase().includes('exec');
              
              let valStr;
              if (isTime) {
                // Handle time-based metrics
                const currentTime = r.running != null ? Math.round(r.running * 1000) : 0; // Convert to ms
                valStr = currentTime > 0 ? currentTime + ' ms' : 'N/A';
              } else {
                // Handle size-based metrics
                const currentSize = r.size || 0;
                valStr = currentSize > 0 ? humanBytes(currentSize) : 'N/A';
              }
              
                          // Use the actual pass/fail status from size-limit results
            // This fixes the issue where custom logic was incorrectly determining pass/fail
            // Previously, the workflow was recalculating pass/fail instead of using size-limit's results
            const pass = r.passed ? '✅' : '❌';
              
              return \`| \${r.name} | \${limitStr} | \${valStr} | \${pass} |\`;
            }).join('\n');

            const failed = results.filter(r => !r.passed);
            const status = failed.length ? '❌ Some bundles exceed limits' : '✅ All bundles are within limits';

            const report = \`# Bundle Analysis Report

          ## 📊 Size Limit Results

          <details>
          <summary>📋 Bundle Size Details (\${results.length} checks)</summary>

          | Check | Limit | Size | Passed |
          |-------|-------|------|--------|
          \${rows}

          </details>

          ## 📋 Analysis Summary

          <details>
          <summary>📊 Summary Statistics</summary>

          | Metric | Value |
          |--------|-------|
          | Total Checks | \${results.length} |
          | Passed | \${results.filter(x => x.passed).length} |
          | Failed | \${failed.length} |
          | Status | \${status} |

          </details>

          \${failed.length ? \`
          ## 🚨 Failed Checks

          <details>
          <summary>⚠️ Failed Bundle Checks (\${failed.length} failures)</summary>

          | Bundle | Current Size | Limit | Status |
          |--------|--------------|-------|--------|
          \${failed.map(x => {
            const c = cfgByName.get(x.name) || {};
            const limitStr = c.limit || (typeof x.sizeLimit === 'number' ? humanBytes(x.sizeLimit) : '-');
            
            // Use the same improved logic for failed checks
            const isTime = (typeof limitStr === 'string' && limitStr.endsWith('ms')) ||
                          (typeof limitStr === 'string' && limitStr.endsWith('s')) ||
                          x.name.toLowerCase().includes('time') ||
                          x.name.toLowerCase().includes('exec');
            
            let valStr;
            if (isTime) {
              const currentTime = x.running != null ? Math.round(x.running * 1000) : 0;
              valStr = currentTime > 0 ? currentTime + ' ms' : 'N/A';
            } else {
              const currentSize = x.size || 0;
              valStr = currentSize > 0 ? humanBytes(currentSize) : 'N/A';
            }
            
            return \`| \${x.name} | \${valStr} | \${limitStr} | ❌ Failed |\`;
          }).join('\n')}

          </details>
          \` : \`
          ## 🎉 All Good!

          <details>
          <summary>✅ Bundle Status</summary>

          Great job keeping your bundles optimized! All size limits are within acceptable ranges.

          </details>
          \`}

          ---
          *Generated on \${new Date().toISOString()}*
          *Generated by GitHub Actions Bundle Size Analysis*
          \`;

            fs.writeFileSync('.bundle-analysis/analysis-report.md', report);
            console.log('✅ Analysis report generated from JSON');
          "

      - name: '🔧 Ensure jq'
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }

      - name: '✅ Evaluate results'
        id: eval
        working-directory: packages/leenders-coaching-nl
        run: |
          HAS_FAIL=$(jq -r '[.[] | select(.passed==false)] | length > 0' .bundle-analysis/size-results.json)
          echo "has_failures=$HAS_FAIL" >> "$GITHUB_OUTPUT"

      - name: '📊 Generate Delta Comparison'
        if: always() && github.event_name == 'pull_request'
        working-directory: packages/leenders-coaching-nl
        run: |
          if [[ -f ".bundle-analysis/size-results-main.json" && -f ".bundle-analysis/size-results.json" ]]; then
            node -e "
              const fs = require('fs');
              const fmtBytes = n => n.toFixed(0) + ' B';
              const fmtMs = n => n.toFixed(0) + ' ms';
              try {
                const current = JSON.parse(fs.readFileSync('.bundle-analysis/size-results.json', 'utf8'));
                const main = JSON.parse(fs.readFileSync('.bundle-analysis/size-results-main.json', 'utf8'));
                const rows = [];

                for (const item of current) {
                  const base = main.find(m => m.name === item.name);
                  if (!base) continue;

                  const isTime = item.running != null || base.running != null; // ✅ detect time via 'running'
                  const curVal  = isTime ? ((item.running || 0) * 1000) : (item.size || 0);
                  const baseVal = isTime ? ((base.running  || 0) * 1000) : (base.size || 0);
                  const delta = curVal - baseVal;
                  const pct   = baseVal > 0 ? ((delta / baseVal) * 100) : 0;
                  const arrow = delta > 0 ? '▲' : delta < 0 ? '▼' : '•';
                  const unit  = isTime ? 'ms' : 'B';
                  const fmt   = isTime ? fmtMs : fmtBytes;

                  rows.push(\`| \${item.name} | \${fmt(curVal)} | \${fmt(baseVal)} | \${arrow} \${delta.toFixed(0)} \${unit} (\${pct.toFixed(1)}%) |\`);
                }

                if (rows.length) {
                  const md = [
                    '## 📈 Changes vs Main Branch',
                    '',
                    '<details>',
                    '<summary>📊 Bundle Size Changes</summary>',
                    '',
                    '| Check | Current | Main | Change |',
                    '|-------|---------|------|--------|',
                    ...rows,
                    '',
                    '</details>',
                    ''
                  ].join('\\n');
                  fs.writeFileSync('.bundle-analysis/delta-report.md', md);
                  console.log('✅ Delta comparison generated');
                }
              } catch (e) {
                console.log('⚠️ Could not generate delta comparison:', e.message);
              }
            "
          fi

      - name: '📈 Append delta to report (if exists)'
        working-directory: packages/leenders-coaching-nl
        run: |
          if [ -f .bundle-analysis/delta-report.md ]; then
            echo "" >> .bundle-analysis/analysis-report.md
            cat .bundle-analysis/delta-report.md >> .bundle-analysis/analysis-report.md
          fi

      - name: '📁 Upload Bundle Analysis Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: 'bundle-analysis-${{ github.run_number }}'
          path: |
            packages/leenders-coaching-nl/.bundle-analysis/
          retention-days: 30

      - name: '💬 Create PR Comment on Size Limit Failure'
        if: github.event_name == 'pull_request' && steps.eval.outputs.has_failures == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: bundle-size-analysis
          number: ${{ github.event.pull_request.number }}
          path: packages/leenders-coaching-nl/.bundle-analysis/analysis-report.md

      - name: '💬 Create PR Comment on Size Limit Success'
        if: github.event_name == 'pull_request' && steps.eval.outputs.has_failures != 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: bundle-size-analysis
          number: ${{ github.event.pull_request.number }}
          path: packages/leenders-coaching-nl/.bundle-analysis/analysis-report.md

      - name: '📋 Job Summary'
        if: always()
        shell: bash
        run: |
          {
            echo "## 📊 Bundle Size Analysis & Limits";
            echo "";
            if [[ -f "packages/leenders-coaching-nl/.bundle-analysis/size-results.json" ]]; then
              echo "### 📊 Size Limit Results";
              echo "";
              echo "<details>";
              echo "<summary>📋 Bundle Size Details</summary>";
              echo "";
              echo "| Check | Limit | Size | Passed |";
              echo "|-------|-------|------|--------|";
              jq -s -r '
                # $r = results, $c = config; join by .name
                (.[0] // []) as $r
                | (.[1] // []) as $c
                | $r[]
                | . as $x
                | "| \($x.name) | \(($c[] | select(.name == $x.name) | .limit) // "-") | " +
                  (if ($x.running != null and (($c[] | select(.name == $x.name) | .limit) // "" | test("ms$|s$"))) then
                    ((($x.running*1000)|floor|tostring) + " ms")
                  elif $x.size != null then
                    (if $x.size >= 1024 then (($x.size/1024)|floor|tostring + " KB") else ($x.size|tostring + " B") end)
                  else "N/A" end) + " | " +
                  (if $x.passed then "✅" else "❌" end) + " |"
              ' packages/leenders-coaching-nl/.bundle-analysis/size-results.json packages/leenders-coaching-nl/.size-limit.json;
              echo "";
              echo "</details>";
              echo "";
              echo "### 📋 Analysis Results";
              echo "Check the workflow artifacts for detailed information about your bundle sizes.";
            else
              echo "### 📋 Analysis Results";
              echo "Size limit results not available. Check the workflow logs for details.";
            fi
            echo "";
            echo "### 📁 Artifacts";
            echo "Download the bundle analysis artifacts to see the detailed report.";
          } >> $GITHUB_STEP_SUMMARY
