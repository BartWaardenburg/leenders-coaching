name: "Store Baseline Metrics"

on:
  push:
    branches: ["main"]
    paths-ignore: ["**.md", "docs/**", ".github/**"]
  workflow_dispatch:

concurrency:
  group: baseline-metrics
  cancel-in-progress: false

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.15.0"
  PNPM_HOME: /home/runner/.local/share/pnpm

jobs:
  store-baseline-metrics:
    name: "Store Baseline Metrics"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: "🔄 Checkout repository"
        uses: actions/checkout@v5

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: "💾 Cache pnpm store"
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-baseline-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: "📥 Install dependencies"
        run: pnpm run ci:install:frozen

      - name: "🧪 Run tests and collect coverage"
        run: pnpm run test:coverage:ci

      - name: "🏗️ Build frontend"
        run: pnpm run build:frontend

      - name: "🚀 Run Lighthouse CI"
        run: |
          npx puppeteer browsers install chrome
          timeout 300 pnpm --filter leenders-coaching-nl run perf:lighthouse:ci || echo "Lighthouse completed with warnings"

      - name: "📊 Collect all metrics"
        run: |
          cd .github/scripts && npm install
          cd ../..
          node .github/scripts/metrics-collector.js all

      - name: "🗄️ Store baseline metrics"
        run: |
          # Create baseline metrics file with metadata
          cat > baseline-metrics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "coverage": $(cat coverage-metrics.json),
            "bundleStats": $(cat bundle-stats.json),
            "lighthouse": $(cat lighthouse-metrics.json),
            "eslint": $(cat eslint-metrics.json),
            "typescript": $(cat typescript-metrics.json)
          }
          EOF

      - name: "💾 Cache baseline metrics"
        uses: actions/cache/save@v4
        with:
          path: baseline-metrics.json
          key: baseline-metrics-${{ github.sha }}

      - name: "💾 Cache latest baseline"
        uses: actions/cache/save@v4
        with:
          path: baseline-metrics.json
          key: baseline-metrics-latest

      - name: "📤 Upload baseline metrics artifact"
        uses: actions/upload-artifact@v4
        with:
          name: baseline-metrics-${{ github.sha }}
          path: |
            baseline-metrics.json
            coverage-metrics.json
            bundle-stats.json
            lighthouse-metrics.json
            eslint-metrics.json
            typescript-metrics.json
            metrics-summary.json
          retention-days: 90

      - name: "📊 Display metrics summary"
        run: |
          echo "## 📊 Baseline Metrics Stored" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage summary
          COVERAGE=$(cat coverage-metrics.json | jq -r '.lines')
          echo "**Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY

          # Bundle size summary  
          BUNDLE_SIZE=$(cat bundle-stats.json | jq -r '.total_size_kb')
          echo "**Bundle Size:** ${BUNDLE_SIZE} KB" >> $GITHUB_STEP_SUMMARY

          # Lighthouse performance
          if [ -f lighthouse-metrics.json ]; then
            PERF_SCORE=$(cat lighthouse-metrics.json | jq -r '.performance * 100 | floor')
            echo "**Performance Score:** ${PERF_SCORE}%" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "These metrics will be used as baseline for future PR comparisons." >> $GITHUB_STEP_SUMMARY
