name: "Store Baseline Metrics"

on:
  push:
    branches: ["main"]
    paths-ignore: ["**.md", "docs/**", ".github/**"]
  workflow_dispatch:

concurrency:
  group: baseline-metrics
  cancel-in-progress: false

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.15.0"
  PNPM_HOME: /home/runner/.local/share/pnpm

jobs:
  store-baseline-metrics:
    name: "Store Baseline Metrics"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: "🔄 Checkout repository"
        uses: actions/checkout@v5

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: "💾 Cache pnpm store"
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-baseline-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: "📥 Install dependencies"
        run: pnpm run ci:install:frozen

      - name: "🧪 Run tests and collect coverage"
        run: pnpm run test:coverage:ci

      - name: "🏗️ Build frontend"
        run: pnpm run build:frontend

      - name: "🚀 Run Lighthouse CI"
        run: |
          npx puppeteer browsers install chrome
          timeout 300 pnpm --filter leenders-coaching-nl run perf:lighthouse:ci || echo "Lighthouse completed with warnings"

      - name: "📊 Collect metrics manually"
        run: |
          # Extract coverage metrics
          if [ -f "packages/leenders-coaching-nl/coverage/coverage-summary.json" ]; then
            cat packages/leenders-coaching-nl/coverage/coverage-summary.json | jq '{
              statements: .total.statements.pct,
              branches: .total.branches.pct,
              functions: .total.functions.pct,
              lines: .total.lines.pct,
              covered_lines: .total.lines.covered,
              total_lines: .total.lines.total
            }' > coverage-metrics.json
          else
            echo '{"statements": 0, "branches": 0, "functions": 0, "lines": 0, "covered_lines": 0, "total_lines": 0}' > coverage-metrics.json
          fi

          # Calculate bundle metrics
          if [ -d "packages/leenders-coaching-nl/.next/static" ]; then
            JS_SIZE=$(find packages/leenders-coaching-nl/.next/static/chunks -name "*.js" -type f -exec du -b {} + 2>/dev/null | awk '{sum += $1} END {print (sum > 0 ? int(sum/1024) : 0)}')
            CSS_SIZE=$(find packages/leenders-coaching-nl/.next/static/css -name "*.css" -type f -exec du -b {} + 2>/dev/null | awk '{sum += $1} END {print (sum > 0 ? int(sum/1024) : 0)}')
            TOTAL_CHUNKS=$(find packages/leenders-coaching-nl/.next/static/chunks -name "*.js" -type f 2>/dev/null | wc -l)
            
            echo "{
              \"js_size_kb\": $JS_SIZE,
              \"css_size_kb\": $CSS_SIZE,
              \"total_chunks\": $TOTAL_CHUNKS,
              \"total_size_kb\": $((JS_SIZE + CSS_SIZE)),
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }" > bundle-stats.json
          else
            echo '{"js_size_kb": 0, "css_size_kb": 0, "total_chunks": 0, "total_size_kb": 0}' > bundle-stats.json
          fi

          # Extract lighthouse metrics
          if [ -f "packages/leenders-coaching-nl/.lighthouseci/lhr-*.json" ]; then
            LATEST_LHR=$(ls -t packages/leenders-coaching-nl/.lighthouseci/lhr-*.json | head -1)
            cat "$LATEST_LHR" | jq '{
              performance: .categories.performance.score,
              accessibility: .categories.accessibility.score,
              "best-practices": .categories["best-practices"].score,
              seo: .categories.seo.score,
              "first-contentful-paint": .audits["first-contentful-paint"].numericValue,
              "largest-contentful-paint": .audits["largest-contentful-paint"].numericValue,
              "cumulative-layout-shift": .audits["cumulative-layout-shift"].numericValue,
              "total-blocking-time": .audits["total-blocking-time"].numericValue,
              "speed-index": .audits["speed-index"].numericValue,
              timestamp: now
            }' > lighthouse-metrics.json
          else
            echo '{
              "performance": 0, "accessibility": 0, "best-practices": 0, "seo": 0,
              "first-contentful-paint": 0, "largest-contentful-paint": 0,
              "cumulative-layout-shift": 0, "total-blocking-time": 0, "speed-index": 0
            }' > lighthouse-metrics.json
          fi

          # Run ESLint and collect metrics
          pnpm run lint:format > eslint-output.txt 2>&1 || echo "ESLint completed"
          if [ -f eslint-output.txt ] && grep -q "^\[" eslint-output.txt; then
            sed -n '/^\[/,$p' eslint-output.txt > eslint-results.json
            if jq empty eslint-results.json 2>/dev/null; then
              cat eslint-results.json | jq '{
                total_files: length,
                error_count: map(.errorCount) | add // 0,
                warning_count: map(.warningCount) | add // 0,
                files_with_issues: map(select(.errorCount > 0 or .warningCount > 0)) | length,
                status: "success"
              }' > eslint-metrics.json
            else
              echo '{"total_files": 0, "error_count": 0, "warning_count": 0, "files_with_issues": 0, "status": "success"}' > eslint-metrics.json
            fi
          else
            echo '{"total_files": 0, "error_count": 0, "warning_count": 0, "files_with_issues": 0, "status": "success"}' > eslint-metrics.json
          fi

          # Run TypeScript check and collect metrics
          pnpm run type-check > typescript-output.txt 2>&1
          if [ $? -eq 0 ]; then
            echo '{"status": "success", "error_count": 0, "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > typescript-metrics.json
          else
            ERROR_COUNT=$(grep -c "error TS" typescript-output.txt || echo "0")
            echo "{\"status\": \"error\", \"error_count\": $ERROR_COUNT, \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > typescript-metrics.json
          fi

      - name: "🗄️ Store baseline metrics"
        run: |
          # Create baseline metrics file with metadata
          cat > baseline-metrics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "coverage": $(cat coverage-metrics.json),
            "bundleStats": $(cat bundle-stats.json),
            "lighthouse": $(cat lighthouse-metrics.json),
            "eslint": $(cat eslint-metrics.json),
            "typescript": $(cat typescript-metrics.json)
          }
          EOF

      - name: "💾 Cache baseline metrics"
        uses: actions/cache/save@v4
        with:
          path: baseline-metrics.json
          key: baseline-metrics-${{ github.sha }}

      - name: "💾 Cache latest baseline"
        uses: actions/cache/save@v4
        with:
          path: baseline-metrics.json
          key: baseline-metrics-latest

      - name: "📤 Upload baseline metrics artifact"
        uses: actions/upload-artifact@v4
        with:
          name: baseline-metrics-${{ github.sha }}
          path: |
            baseline-metrics.json
            coverage-metrics.json
            bundle-stats.json
            lighthouse-metrics.json
            eslint-metrics.json
            typescript-metrics.json
            metrics-summary.json
          retention-days: 90

      - name: "📊 Display metrics summary"
        run: |
          echo "## 📊 Baseline Metrics Stored" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage summary
          COVERAGE=$(cat coverage-metrics.json | jq -r '.lines')
          echo "**Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY

          # Bundle size summary  
          BUNDLE_SIZE=$(cat bundle-stats.json | jq -r '.total_size_kb')
          echo "**Bundle Size:** ${BUNDLE_SIZE} KB" >> $GITHUB_STEP_SUMMARY

          # Lighthouse performance
          if [ -f lighthouse-metrics.json ]; then
            PERF_SCORE=$(cat lighthouse-metrics.json | jq -r '.performance * 100 | floor')
            echo "**Performance Score:** ${PERF_SCORE}%" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "These metrics will be used as baseline for future PR comparisons." >> $GITHUB_STEP_SUMMARY
