name: 'Lighthouse (PR)'

on: deployment_status

concurrency:
  group: lhci-${{ github.event.deployment.id }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: read
  pull-requests: write

env:
  NODE_VERSION: '22'

jobs:
  lighthouse:
    name: 'Lighthouse CI (Preview)'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: |
      github.event.deployment_status.state == 'success' &&
      contains(github.event.deployment.environment, 'leenders-coaching') &&
      !contains(github.event.deployment.environment, 'studio')

    steps:
      - name: '🔄 Checkout'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '🔗 Resolve preview URL (environment_url)'
        id: url
        shell: bash
        run: |
          set -euo pipefail
          url="${{ github.event.deployment_status.environment_url || '' }}"
          if [[ "$url" == *"vercel.com/login"* || "$url" == *"sso-api"* ]]; then
            if [[ "$url" =~ url=([^&]+) ]]; then
              enc="${BASH_REMATCH[1]}"
              url="$(python3 -c "import sys,urllib.parse;print(urllib.parse.unquote(sys.argv[1]))" "$enc")"
            fi
          fi
          [[ "$url" =~ ^https?:// ]] || { echo "No valid environment_url"; exit 1; }
          echo "preview_url=$url" >> "$GITHUB_OUTPUT"

      - name: '🚀 Run Lighthouse CI'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.url.outputs.preview_url }}
            ${{ steps.url.outputs.preview_url }}/over-mij
            ${{ steps.url.outputs.preview_url }}/aanpak
            ${{ steps.url.outputs.preview_url }}/coaching
            ${{ steps.url.outputs.preview_url }}/contact
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          budgetPath: packages/leenders-coaching-nl/budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_FORM_FACTOR: mobile
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}

      - name: '📊 Parse Lighthouse results'
        id: parse
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          file="${{ steps.lhci.outputs.resultsPath }}/assertion-results.json"
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq -y >/dev/null 2>&1; }
          if [[ ! -f "$file" ]]; then
            echo "overall=⚠️ NO RESULTS" >> $GITHUB_OUTPUT
            echo "perf=N/A" >> $GITHUB_OUTPUT
            echo "a11y=N/A" >> $GITHUB_OUTPUT
            echo "seo=N/A"  >> $GITHUB_OUTPUT
            echo "bp=N/A"   >> $GITHUB_OUTPUT
            echo "errc=0"   >> $GITHUB_OUTPUT
            echo "warnc=0"  >> $GITHUB_OUTPUT
            echo "passc=0"  >> $GITHUB_OUTPUT
            echo "report="  >> $GITHUB_OUTPUT
            exit 0
          fi
          score () { jq -r '[.[] | select(.auditId=="categories:'"$1"'")] | if length>0 then .[0].actual else "N/A" end' "$file"; }
          to_pct () { awk -v v="$1" 'BEGIN{printf "%.0f", v*100}'; }
          perf=$(score performance); a11y=$(score accessibility); seo=$(score seo); bp=$(score best-practices)
          [[ "$perf" != "N/A" ]] && perf=$(to_pct "$perf") || perf="N/A"
          [[ "$a11y" != "N/A" ]] && a11y=$(to_pct "$a11y") || a11y="N/A"
          [[ "$seo"  != "N/A" ]] && seo=$(to_pct "$seo")   || seo="N/A"
          [[ "$bp"   != "N/A" ]] && bp=$(to_pct "$bp")     || bp="N/A"
          errc=$(jq '[.[] | select(.level=="error")] | length' "$file")
          warnc=$(jq '[.[] | select(.level=="warn")]  | length' "$file")
          passc=$(jq '[.[] | select(.level=="pass")]  | length' "$file")
          [[ "$errc" -gt 0 ]] && overall="❌ FAILED" || overall="✅ PASSED"
          echo "overall=$overall" >> $GITHUB_OUTPUT
          echo "perf=$perf" >> $GITHUB_OUTPUT
          echo "a11y=$a11y" >> $GITHUB_OUTPUT
          echo "seo=$seo"   >> $GITHUB_OUTPUT
          echo "bp=$bp"     >> $GITHUB_OUTPUT
          echo "errc=$errc" >> $GITHUB_OUTPUT
          echo "warnc=$warnc" >> $GITHUB_OUTPUT
          echo "passc=$passc" >> $GITHUB_OUTPUT
          links='${{ steps.lhci.outputs.links }}'
          if [[ -n "$links" && "$links" != "null" ]]; then
            first_url=$(echo "$links" | jq -r 'values[0]' 2>/dev/null || echo "")
            echo "report=$first_url" >> $GITHUB_OUTPUT
          else
            echo "report=" >> $GITHUB_OUTPUT
          fi

      - name: '🔎 Resolve PR number'
        id: pr
        if: always()
        env:
          REPO: ${{ github.repository }}
          SHA: ${{ github.event.deployment.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          json=$(curl -sS -H "Authorization: token ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/${REPO}/commits/${SHA}/pulls")
          pr=$(echo "$json" | jq -r 'map(select(.state!="closed")) | first | .number // empty')
          echo "number=$pr" >> $GITHUB_OUTPUT
          [[ -n "$pr" ]] && echo "Found PR #$pr" || echo "No open PR found for $SHA"

      - name: '💬 Sticky Lighthouse comment'
        if: always() && steps.pr.outputs.number != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: lighthouse-report
          number: ${{ steps.pr.outputs.number }}
          message: |
            ## 🚀 Lighthouse Performance Report
            **Preview URL:** ${{ steps.url.outputs.preview_url }}
            **Status:** ${{ steps.parse.outputs.overall }}

            | Category | Score |
            |---|---|
            | Performance | ${{ steps.parse.outputs.perf }}/100 |
            | Accessibility | ${{ steps.parse.outputs.a11y }}/100 |
            | SEO | ${{ steps.parse.outputs.seo }}/100 |
            | Best Practices | ${{ steps.parse.outputs.bp }}/100 |

            **Assertions:** ✅ ${{ steps.parse.outputs.passc }} · ⚠️ ${{ steps.parse.outputs.warnc }} · ❌ ${{ steps.parse.outputs.errc }}
            ${{ steps.parse.outputs.report != '' && format('🔗 [Interactive report]({0})', steps.parse.outputs.report) || '' }}

      - name: '📋 Job summary'
        if: always()
        shell: bash
        run: |
          {
            echo "## 🚀 Lighthouse (Preview)";
            echo "- URL: ${{ steps.url.outputs.preview_url }}";
            echo "- Status: ${{ steps.parse.outputs.overall }}";
            echo "";
            echo "| Category | Score |";
            echo "|---|---|";
            echo "| Performance | ${{ steps.parse.outputs.perf }}/100 |";
            echo "| Accessibility | ${{ steps.parse.outputs.a11y }}/100 |";
            echo "| SEO | ${{ steps.parse.outputs.seo }}/100 |";
            echo "| Best Practices | ${{ steps.parse.outputs.bp }}/100 |";
            if [[ -n "${{ steps.parse.outputs.report }}" ]]; then
              echo "";
              echo "- [Interactive report](${{ steps.parse.outputs.report }})";
            fi
          } >> $GITHUB_STEP_SUMMARY
