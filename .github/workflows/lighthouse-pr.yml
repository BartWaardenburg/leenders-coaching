name: 'Lighthouse (PR)'

on: deployment_status

concurrency:
  group: lhci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  lighthouse:
    name: 'Lighthouse CI (Preview)'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      deployments: read
    # Only run for successful leenders-coaching deployments (not studio)
    if: |
      github.event.deployment_status.state == 'success' &&
      contains(github.event.deployment.environment, 'leenders-coaching') &&
      !contains(github.event.deployment.environment, 'studio')

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '🔍 Get Vercel preview URL'
        id: get_url
        run: |
          set -euo pipefail

          echo "🎉 Triggered by successful Vercel deployment!"
          echo "Environment: ${{ github.event.deployment.environment }}"
          echo "State: ${{ github.event.deployment_status.state }}"

          deployment_url="${{ github.event.deployment_status.environment_url }}"

          if [ -z "$deployment_url" ] || [ "$deployment_url" = "null" ]; then
            echo "❌ No environment URL in deployment status event"
            echo "Debug info:"
            echo "  Deployment ID: ${{ github.event.deployment.id }}"
            echo "  Environment: ${{ github.event.deployment.environment }}"
            echo "  State: ${{ github.event.deployment_status.state }}"
            exit 1
          fi

          echo "🔍 Raw deployment URL: $deployment_url"

          # Check if this is a Vercel redirect URL and extract the real preview URL
          if [[ "$deployment_url" == *"vercel.com/login"* ]] || [[ "$deployment_url" == *"sso-api"* ]]; then
            echo "⚠️  Detected Vercel redirect URL, extracting preview URL..."
            
            # Extract URL from the redirect (URL encoded in the 'url' parameter)
            if [[ "$deployment_url" =~ url%3D([^&]*) ]]; then
              encoded_url="${BASH_REMATCH[1]}"
              # URL decode the preview URL
              preview_url=$(echo "$encoded_url" | sed 's/%3A/:/g; s/%2F/\//g; s/%3F/?/g; s/%3D/=/g; s/%26/\&/g')
              echo "🔧 Extracted preview URL: $preview_url"
            else
              echo "❌ Could not extract preview URL from redirect"
              echo "   Redirect URL: $deployment_url"
              exit 1
            fi
          else
            # Direct preview URL
            preview_url="$deployment_url"
            echo "✅ Direct preview URL: $preview_url"
          fi

          # Validate the preview URL
          if [[ "$preview_url" =~ ^https?://.*\.vercel\.app/?.*$ ]]; then
            echo "✅ Valid Vercel preview URL confirmed"
            echo "preview-url=$preview_url" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid preview URL format: $preview_url"
            echo "   Expected: https://something.vercel.app"
            exit 1
          fi

      - name: '🧪 Test preview URL accessibility'
        run: |
          preview_url="${{ steps.get_url.outputs.preview-url }}"
          echo "🔍 Testing preview URL accessibility: $preview_url"

          if curl -sSf --max-time 30 "$preview_url" > /dev/null; then
            echo "✅ Preview URL is accessible"
          else
            echo "❌ Preview URL is not accessible"
            echo "   This might cause Lighthouse to fail"
            echo "   URL: $preview_url"
          fi

      - name: '🚀 Run Lighthouse CI'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.get_url.outputs.preview-url }}
            ${{ steps.get_url.outputs.preview-url }}/over-mij
            ${{ steps.get_url.outputs.preview-url }}/aanpak
            ${{ steps.get_url.outputs.preview-url }}/coaching
            ${{ steps.get_url.outputs.preview-url }}/contact
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: '📊 Display Lighthouse summary'
        if: always()
        run: |
          echo "## 🚀 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Preview URL:** ${{ steps.get_url.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse reports have been uploaded as artifacts and are available in the PR status checks." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📈 **View detailed reports:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check the PR status checks for individual page results" >> $GITHUB_STEP_SUMMARY
          echo "- Download HTML reports from job artifacts" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.lhci.outputs.links }}" != "" ]]; then
            echo "- [Temporary public reports](${{ steps.lhci.outputs.links }})" >> $GITHUB_STEP_SUMMARY
          fi
