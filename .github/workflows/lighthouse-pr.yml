name: 'Lighthouse (PR)'

on: deployment_status

concurrency:
  group: lhci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'

jobs:
  lighthouse:
    name: 'Lighthouse CI (Preview)'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      deployments: read
      pull-requests: write
      issues: write
    if: |
      github.event.deployment_status.state == 'success' &&
      contains(github.event.deployment.environment, 'leenders-coaching') &&
      !contains(github.event.deployment.environment, 'studio')

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '🔑 Verify Vercel API authentication'
        run: |
          if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
            user_response=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              "https://api.vercel.com/v2/user" || echo "AUTH_FAILED")
            
            if [ "$user_response" = "AUTH_FAILED" ]; then
              echo "❌ Vercel API authentication failed"
              echo "⚠️ This may cause issues accessing protected preview deployments"
            else
              username=$(echo "$user_response" | jq -r '.user.username // "unknown"')
              echo "✅ Vercel API authentication successful"
              echo "📋 Authenticated as: $username"
            fi
          else
            echo "⚠️ No VERCEL_TOKEN available - preview protection bypass unavailable"
          fi

      - name: '🔍 Get Vercel preview URL with API authentication'
        id: get_url
        run: |
          set -euo pipefail

          deployment_id="${{ github.event.deployment.id }}"

          if [ -n "${{ secrets.VERCEL_TOKEN }}" ] && [ -n "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            vercel_response=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              "https://api.vercel.com/v13/deployments/$deployment_id" || echo "API_FAILED")
            
            if [ "$vercel_response" != "API_FAILED" ]; then
              api_url=$(echo "$vercel_response" | jq -r '.url // empty')
              if [ -n "$api_url" ] && [ "$api_url" != "null" ] && [ "$api_url" != "empty" ]; then
                deployment_url="https://$api_url"
              else
                list_url="https://api.vercel.com/v6/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID }}&limit=10"
                if [ -n "${{ secrets.VERCEL_ORG_ID }}" ]; then
                  list_url="$list_url&teamId=${{ secrets.VERCEL_ORG_ID }}"
                fi
                
                deployments_response=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
                  "$list_url" || echo "LIST_FAILED")
                
                if [ "$deployments_response" != "LIST_FAILED" ]; then
                  found_url=$(echo "$deployments_response" | jq -r --arg id "$deployment_id" \
                    '.deployments[] | select(.uid == $id) | .url // empty')
                  
                  if [ -n "$found_url" ] && [ "$found_url" != "null" ] && [ "$found_url" != "empty" ]; then
                    deployment_url="https://$found_url"
                  else
                    deployment_url="${{ github.event.deployment_status.environment_url }}"
                  fi
                else
                  deployment_url="${{ github.event.deployment_status.environment_url }}"
                fi
              fi
            else
              deployment_url="${{ github.event.deployment_status.environment_url }}"
            fi
          else
            deployment_url="${{ github.event.deployment_status.environment_url }}"
          fi

          if [ -z "$deployment_url" ] || [ "$deployment_url" = "null" ]; then
            exit 1
          fi

          if [[ "$deployment_url" == *"vercel.com/login"* ]] || [[ "$deployment_url" == *"sso-api"* ]]; then
            if [[ "$deployment_url" =~ url%3D([^&]*) ]]; then
              encoded_url="${BASH_REMATCH[1]}"
              preview_url=$(echo "$encoded_url" | sed 's/%3A/:/g; s/%2F/\//g; s/%3F/?/g; s/%3D/=/g; s/%26/\&/g')
            else
              exit 1
            fi
          else
            preview_url="$deployment_url"
          fi

          if [[ "$preview_url" =~ ^https?://.*\.vercel\.app/?.*$ ]]; then
            echo "preview-url=$preview_url" >> $GITHUB_OUTPUT
          else
            exit 1
          fi

      - name: '🧪 Test preview URL accessibility'
        run: |
          preview_url="${{ steps.get_url.outputs.preview-url }}"

          if [ -n "${{ secrets.VERCEL_PROTECTION_BYPASS }}" ]; then
            auth_header="-H 'x-vercel-protection-bypass: ${{ secrets.VERCEL_PROTECTION_BYPASS }}' -H 'x-vercel-set-bypass-cookie: true'"
          else
            auth_header=""
          fi

          response=$(curl -sL --max-time 30 --max-redirs 5 $auth_header "$preview_url" || echo "CURL_FAILED")
          final_url=$(curl -sLI --max-time 30 --max-redirs 5 $auth_header "$preview_url" 2>/dev/null | grep -i "^location:" | tail -1 | cut -d' ' -f2- | tr -d '\r\n' || echo "NO_REDIRECT")

          if [[ "$final_url" == *"vercel.com/login"* ]] || [[ "$final_url" == *"sso-api"* ]]; then
            exit 1
          elif [[ "$response" == "CURL_FAILED" ]]; then
            exit 1
          fi

      - name: '🚀 Run Lighthouse CI'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.get_url.outputs.preview-url }}
            ${{ steps.get_url.outputs.preview-url }}/over-mij
            ${{ steps.get_url.outputs.preview-url }}/aanpak
            ${{ steps.get_url.outputs.preview-url }}/coaching
            ${{ steps.get_url.outputs.preview-url }}/contact
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          budgetPath: packages/leenders-coaching-nl/budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          # Use Vercel's official environment variable name for Protection Bypass
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_PROTECTION_BYPASS }}

      - name: '📊 Parse Lighthouse results'
        id: parse_results
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y bc

          results_file="${{ steps.lhci.outputs.resultsPath }}/assertion-results.json"

          if [ -f "$results_file" ]; then
            overall_status=$(jq -r 'if any(.level == "error") then "❌ FAILED" else "✅ PASSED" end' "$results_file")
            echo "overall_status=$overall_status" >> $GITHUB_OUTPUT
            
            error_count=$(jq '[.[] | select(.level == "error")] | length' "$results_file")
            warn_count=$(jq '[.[] | select(.level == "warn")] | length' "$results_file")
            pass_count=$(jq '[.[] | select(.level == "pass")] | length' "$results_file")
            
            echo "error_count=$error_count" >> $GITHUB_OUTPUT
            echo "warn_count=$warn_count" >> $GITHUB_OUTPUT
            echo "pass_count=$pass_count" >> $GITHUB_OUTPUT
            
            performance_score=$(jq -r '[.[] | select(.auditId == "categories:performance")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            accessibility_score=$(jq -r '[.[] | select(.auditId == "categories:accessibility")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            seo_score=$(jq -r '[.[] | select(.auditId == "categories:seo")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            best_practices_score=$(jq -r '[.[] | select(.auditId == "categories:best-practices")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            
            fcp=$(jq -r '[.[] | select(.auditId == "first-contentful-paint")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            lcp=$(jq -r '[.[] | select(.auditId == "largest-contentful-paint")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            cls=$(jq -r '[.[] | select(.auditId == "cumulative-layout-shift")] | if length > 0 then .[0].actual else "N/A" end' "$results_file")
            
            budget_violations=$(jq '[.[] | select(.level == "error" and (.auditId | contains("resource-summary") or contains("performance-budget")))] | length' "$results_file")
            
            timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
            
            format_score() {
              if [ "$1" != "N/A" ] && [ "$1" != "null" ]; then
                printf "%.0f" $(echo "$1 * 100" | bc -l)
              else
                echo "N/A"
              fi
            }
            
            perf_display=$(format_score "$performance_score")
            a11y_display=$(format_score "$accessibility_score")
            seo_display=$(format_score "$seo_score")
            bp_display=$(format_score "$best_practices_score")
            
            echo "perf_display=$perf_display" >> $GITHUB_OUTPUT
            echo "a11y_display=$a11y_display" >> $GITHUB_OUTPUT
            echo "seo_display=$seo_display" >> $GITHUB_OUTPUT
            echo "bp_display=$bp_display" >> $GITHUB_OUTPUT
            
            links_output="${{ steps.lhci.outputs.links }}"
            if [ "$links_output" != "" ] && [ "$links_output" != "null" ]; then
              first_url=$(echo "$links_output" | jq -r 'values[0]' 2>/dev/null || echo "$links_output")
              echo "formatted_links=$first_url" >> $GITHUB_OUTPUT
            else
              echo "formatted_links=" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "overall_status=⚠️ NO RESULTS" >> $GITHUB_OUTPUT
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "warn_count=0" >> $GITHUB_OUTPUT
            echo "pass_count=0" >> $GITHUB_OUTPUT
            echo "formatted_links=" >> $GITHUB_OUTPUT
          fi

      - name: '🔍 Get PR number from deployment'
        id: get_pr
        run: |
          pr_number=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.event.deployment.id }}" \
            | jq -r '.payload.pull_request.number // empty')

          if [ -n "$pr_number" ] && [ "$pr_number" != "null" ]; then
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          else
            ref="${{ github.event.deployment.ref }}"
            if [[ "$ref" =~ refs/pull/([0-9]+)/merge ]]; then
              pr_number="${BASH_REMATCH[1]}"
              echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            else
              echo "pr_number=" >> $GITHUB_OUTPUT
            fi
          fi

      - name: '💬 Post detailed Lighthouse comment'
        if: always() && steps.get_pr.outputs.pr_number != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lighthouse-report
          number: ${{ steps.get_pr.outputs.pr_number }}
          message: |
            ## 🚀 Lighthouse Performance Report

            **Preview URL:** ${{ steps.get_url.outputs.preview-url }}
            **Status:** ${{ steps.parse_results.outputs.overall_status }}
            **Generated:** ${{ steps.parse_results.outputs.timestamp }}

            ### 📊 Performance Scores

            | Category | Score | Status |
            |----------|-------|--------|
            | 🚀 Performance | ${{ steps.parse_results.outputs.perf_display != 'N/A' && format('{0}/100', steps.parse_results.outputs.perf_display) || 'N/A' }} | ${{ steps.parse_results.outputs.perf_display != 'N/A' && (steps.parse_results.outputs.perf_display >= '80' && '✅' || (steps.parse_results.outputs.perf_display >= '50' && '⚠️' || '❌')) || '❓' }} |
            | ♿ Accessibility | ${{ steps.parse_results.outputs.a11y_display != 'N/A' && format('{0}/100', steps.parse_results.outputs.a11y_display) || 'N/A' }} | ${{ steps.parse_results.outputs.a11y_display != 'N/A' && (steps.parse_results.outputs.a11y_display >= '95' && '✅' || (steps.parse_results.outputs.a11y_display >= '80' && '⚠️' || '❌')) || '❓' }} |
            | 🔍 SEO | ${{ steps.parse_results.outputs.seo_display != 'N/A' && format('{0}/100', steps.parse_results.outputs.seo_display) || 'N/A' }} | ${{ steps.parse_results.outputs.seo_display != 'N/A' && (steps.parse_results.outputs.seo_display >= '90' && '✅' || (steps.parse_results.outputs.seo_display >= '70' && '⚠️' || '❌')) || '❓' }} |
            | ⚡ Best Practices | ${{ steps.parse_results.outputs.bp_display != 'N/A' && format('{0}/100', steps.parse_results.outputs.bp_display) || 'N/A' }} | ${{ steps.parse_results.outputs.bp_display != 'N/A' && (steps.parse_results.outputs.bp_display >= '90' && '✅' || (steps.parse_results.outputs.bp_display >= '70' && '⚠️' || '❌')) || '❓' }} |

            ### ⚡ Core Web Vitals

            | Metric | Value | Target | Status |
            |--------|-------|--------|--------|
            | 🎨 First Contentful Paint | ${{ steps.parse_results.outputs.fcp != 'N/A' && format('{0}ms', steps.parse_results.outputs.fcp) || 'N/A' }} | ≤2000ms | ${{ steps.parse_results.outputs.fcp != 'N/A' && (steps.parse_results.outputs.fcp <= '2000' && '✅' || '❌') || '❓' }} |
            | 🖼️ Largest Contentful Paint | ${{ steps.parse_results.outputs.lcp != 'N/A' && format('{0}ms', steps.parse_results.outputs.lcp) || 'N/A' }} | ≤2500ms | ${{ steps.parse_results.outputs.lcp != 'N/A' && (steps.parse_results.outputs.lcp <= '2500' && '✅' || '❌') || '❓' }} |
            | 📐 Cumulative Layout Shift | ${{ steps.parse_results.outputs.cls != 'N/A' && steps.parse_results.outputs.cls || 'N/A' }} | ≤0.1 | ${{ steps.parse_results.outputs.cls != 'N/A' && (steps.parse_results.outputs.cls <= '0.1' && '✅' || '❌') || '❓' }} |

            ### 📋 Assertion Results

            - ✅ **Passed:** ${{ steps.parse_results.outputs.pass_count }} assertions
            - ⚠️ **Warnings:** ${{ steps.parse_results.outputs.warn_count }} assertions  
            - ❌ **Failed:** ${{ steps.parse_results.outputs.error_count }} assertions
            ${{ steps.parse_results.outputs.budget_violations > '0' && format('- 💰 **Budget violations:** {0}', steps.parse_results.outputs.budget_violations) || '' }}

            ### 🔗 Detailed Reports

            ${{ steps.parse_results.outputs.formatted_links != '' && format('- 📊 [View interactive reports]({0})', steps.parse_results.outputs.formatted_links) || '- 📊 Interactive reports not available' }}
            - ✅ Check PR status checks for pass/fail details
            - 📄 Download HTML reports from job artifacts

            **Pages analyzed:**
            - 🏠 Home page (`/`)
            - 👤 Over mij (`/over-mij`)
            - 🎯 Aanpak (`/aanpak`)
            - 💼 Coaching (`/coaching`)
            - 📧 Contact (`/contact`)

            ---
            <details>
            <summary>📖 Understanding the scores</summary>

            - **Performance** (Target: ≥80): Measures loading speed and runtime performance
            - **Accessibility** (Target: ≥95): Ensures the site is usable by people with disabilities
            - **SEO** (Target: ≥90): Checks search engine optimization best practices  
            - **Best Practices** (Target: ≥90): Follows web development best practices

            *This comment updates automatically on each push.*
            </details>

      - name: '⚠️ Fallback notification (no PR found)'
        if: always() && steps.get_pr.outputs.pr_number == ''
        run: |
          echo "## ⚠️ Lighthouse Results Available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Could not post comment to PR, but Lighthouse analysis completed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ steps.parse_results.outputs.overall_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed assertions:** ${{ steps.parse_results.outputs.error_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget violations:** ${{ steps.parse_results.outputs.budget_violations }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview URL:** ${{ steps.get_url.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check job artifacts for detailed HTML reports." >> $GITHUB_STEP_SUMMARY

      - name: '📊 Display Lighthouse summary'
        if: always()
        run: |
          echo "## 🚀 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Preview URL:** ${{ steps.get_url.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse reports have been uploaded as artifacts and are available in the PR status checks." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📈 **View detailed reports:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check the PR status checks for individual page results" >> $GITHUB_STEP_SUMMARY
          echo "- Download HTML reports from job artifacts" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.lhci.outputs.links }}" != "" ]]; then
            echo "- [Temporary public reports](${{ steps.lhci.outputs.links }})" >> $GITHUB_STEP_SUMMARY
          fi
