name: 'Lighthouse (PR)'

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore: ['**.md', 'docs/**']

concurrency:
  group: lhci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  lighthouse:
    name: 'Lighthouse CI (Preview)'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      deployments: read

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '⏳ Wait for Vercel preview deployment'
        id: wait
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          set -euo pipefail

          echo "Waiting for Vercel preview deployment for $SHA..."

          # Find the deployment with environment "Preview" for this SHA
          attempt=0
          deployment_id=""
          while [ $attempt -lt 60 ]; do
            deployments=$(curl -sSf -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/deployments?sha=$SHA&environment=Preview")

            deployment_id=$(echo "$deployments" | jq -r '.[0].id // empty')
            if [ -n "$deployment_id" ] && [ "$deployment_id" != "null" ]; then
              echo "Found deployment id: $deployment_id"
              break
            fi

            attempt=$((attempt+1))
            sleep 5
          done

          if [ -z "$deployment_id" ]; then
            echo "Failed to find Preview deployment for $SHA"
            exit 1
          fi

          # Wait for the deployment status to become success and capture environment_url
          attempt=0
          preview_url=""
          while [ $attempt -lt 120 ]; do
            statuses=$(curl -sSf -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/deployments/$deployment_id/statuses")

            state=$(echo "$statuses" | jq -r '.[0].state // empty')
            env_url=$(echo "$statuses" | jq -r '.[0].environment_url // empty')

            echo "Current state: ${state:-unknown}"

            if [ "$state" = "success" ] && [ -n "$env_url" ] && [ "$env_url" != "null" ]; then
              preview_url="$env_url"
              break
            fi

            if [ "$state" = "failure" ] || [ "$state" = "inactive" ] || [ "$state" = "error" ]; then
              echo "Deployment failed with state: $state"
              exit 1
            fi

            attempt=$((attempt+1))
            sleep 5
          done

          if [ -z "$preview_url" ]; then
            echo "Timed out waiting for successful deployment URL"
            exit 1
          fi

          echo "preview-url=$preview_url" >> $GITHUB_OUTPUT
          echo "Preview URL: $preview_url"

      # Run Lighthouse CI against the Vercel preview URL
      - name: '🚀 Run Lighthouse CI'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.wait.outputs.preview-url }}
            ${{ steps.wait.outputs.preview-url }}/over-mij
            ${{ steps.wait.outputs.preview-url }}/aanpak
            ${{ steps.wait.outputs.preview-url }}/coaching
            ${{ steps.wait.outputs.preview-url }}/contact
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          uploadArtifacts: true # keep HTML reports in job artifacts
          temporaryPublicStorage: true # quick links to share (7-day TTL)
        env:
          # Recommended way to add LHCI status checks to the PR
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: '📊 Display Lighthouse summary'
        if: always()
        run: |
          echo "## 🚀 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Preview URL:** ${{ steps.wait.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse reports have been uploaded as artifacts and are available in the PR status checks." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📈 **View detailed reports:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check the PR status checks for individual page results" >> $GITHUB_STEP_SUMMARY
          echo "- Download HTML reports from job artifacts" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.lhci.outputs.links }}" != "" ]]; then
            echo "- [Temporary public reports](${{ steps.lhci.outputs.links }})" >> $GITHUB_STEP_SUMMARY
          fi
