name: 'Lighthouse (PR)'

on: deployment_status

concurrency:
  group: lhci-${{ github.event.deployment.id }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '22'

jobs:
  lighthouse:
    name: 'Lighthouse CI (Preview)'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: |
      github.event.deployment_status.state == 'success' &&
      contains(github.event.deployment.environment, 'leenders-coaching') &&
      !contains(github.event.deployment.environment, 'studio')

    steps:
      - name: '🔄 Checkout'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '🔗 Resolve preview URL (environment_url)'
        id: url
        shell: bash
        run: |
          set -euo pipefail
          url="${{ github.event.deployment_status.environment_url || '' }}"
          if [[ "$url" == *"vercel.com/login"* || "$url" == *"sso-api"* ]]; then
            if [[ "$url" =~ url=([^&]+) ]]; then
              enc="${BASH_REMATCH[1]}"
              url="$(python3 -c "import sys,urllib.parse;print(urllib.parse.unquote(sys.argv[1]))" "$enc")"
            fi
          fi
          [[ "$url" =~ ^https?:// ]] || { echo "No valid environment_url"; exit 1; }
          echo "preview_url=$url" >> "$GITHUB_OUTPUT"

      - name: '🚀 Run Lighthouse CI'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.url.outputs.preview_url }}
            ${{ steps.url.outputs.preview_url }}/over-mij
            ${{ steps.url.outputs.preview_url }}/aanpak
            ${{ steps.url.outputs.preview_url }}/coaching
            ${{ steps.url.outputs.preview_url }}/contact
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          budgetPath: packages/leenders-coaching-nl/budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_FORM_FACTOR: mobile
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}

      - name: '📊 Parse Lighthouse results'
        id: parse
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq -y >/dev/null 2>&1; }

          results_dir="${{ steps.lhci.outputs.resultsPath }}"
          assertion_file="$results_dir/assertion-results.json"

          # defaults
          echo "errc=0"   >> $GITHUB_OUTPUT
          echo "warnc=0"  >> $GITHUB_OUTPUT
          echo "passc=0"  >> $GITHUB_OUTPUT

          # assertions counts (if file exists)
          if [[ -f "$assertion_file" ]]; then
            errc=$(jq '[.[] | select(.level=="error")] | length' "$assertion_file")
            warnc=$(jq '[.[] | select(.level=="warn")]  | length' "$assertion_file")
            passc=$(jq '[.[] | select(.level=="pass")]  | length' "$assertion_file")
            echo "errc=$errc"  >> $GITHUB_OUTPUT
            echo "warnc=$warnc" >> $GITHUB_OUTPUT
            echo "passc=$passc" >> $GITHUB_OUTPUT
          fi

          # derive category scores from raw LHRs (robust)
          shopt -s nullglob
          lhrs=("$results_dir"/lhr-*.json)
          if [[ ${#lhrs[@]} -eq 0 ]]; then
            echo "perf=N/A" >> $GITHUB_OUTPUT
            echo "a11y=N/A" >> $GITHUB_OUTPUT
            echo "seo=N/A"  >> $GITHUB_OUTPUT
            echo "bp=N/A"   >> $GITHUB_OUTPUT
            echo "overall=⚠️ NO RESULTS" >> $GITHUB_OUTPUT
          else
            readarray -t vals < <(jq -s '
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              {
                perf: (map(.categories.performance.score) | avg),
                a11y: (map(.categories.accessibility.score) | avg),
                seo:  (map(.categories.seo.score) | avg),
                bp:   (map(.categories["best-practices"].score) | avg)
              } | [.perf,.a11y,.seo,.bp] | map(if .==null then "N/A" else . end) | .[]
            ' "${lhrs[@]}")

            to_pct () { awk -v v="$1" 'BEGIN{printf "%.0f", v*100}'; }
            perf="${vals[0]}"; a11y="${vals[1]}"; seo="${vals[2]}"; bp="${vals[3]}"

            [[ "$perf" != "N/A" ]] && echo "perf=$(to_pct "$perf")" >> $GITHUB_OUTPUT || echo "perf=N/A" >> $GITHUB_OUTPUT
            [[ "$a11y" != "N/A" ]] && echo "a11y=$(to_pct "$a11y")" >> $GITHUB_OUTPUT || echo "a11y=N/A" >> $GITHUB_OUTPUT
            [[ "$seo"  != "N/A" ]] && echo "seo=$(to_pct "$seo")"   >> $GITHUB_OUTPUT || echo "seo=N/A"  >> $GITHUB_OUTPUT
            [[ "$bp"   != "N/A" ]] && echo "bp=$(to_pct "$bp")"     >> $GITHUB_OUTPUT || echo "bp=N/A"   >> $GITHUB_OUTPUT

            # overall from assertions if present; else pass
            if [[ -f "$assertion_file" ]] && [[ "${errc:-0}" -gt 0 ]]; then
              echo "overall=❌ FAILED" >> $GITHUB_OUTPUT
            else
              echo "overall=✅ PASSED" >> $GITHUB_OUTPUT
            fi
          fi

          # robust link extraction
          links='${{ steps.lhci.outputs.links }}'
          report=""
          if [[ -n "$links" && "$links" != "null" ]]; then
            if echo "$links" | grep -q '^\s*\['; then
              report="$(echo "$links" | jq -r 'first // empty' 2>/dev/null || true)"
            else
              report="$(echo "$links" | head -n1 | tr -d '[:space:]')"
            fi
          fi
          echo "report=$report" >> $GITHUB_OUTPUT

      - name: '🧾 Build per-page table'
        id: table
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq -y >/dev/null 2>&1; }
          results_dir="${{ steps.lhci.outputs.resultsPath }}"
          # collect finalUrl -> scores map from LHRs
          rows=$(
            jq -r '
              [ inputs | {url:.finalDisplayedUrl // .finalUrl,
                           p:(.categories.performance.score//null),
                           a:(.categories.accessibility.score//null),
                           s:(.categories.seo.score//null),
                           b:(.categories["best-practices"].score//null)} ]
              | sort_by(.url)
              | map("| \(.url) | " +
                    (if .p then ((.p*100)|tostring) else "N/A" end) + " | " +
                    (if .a then ((.a*100)|tostring) else "N/A" end) + " | " +
                    (if .s then ((.s*100)|tostring) else "N/A" end) + " | " +
                    (if .b then ((.b*100)|tostring) else "N/A" end) + " |")[]
            ' "$results_dir"/lhr-*.json
          )

          # align report links (same order as action input)
          mapfile -t link_lines < <(printf '%s\n' "${{ steps.lhci.outputs.links }}")
          i=0
          table="| Page | Perf | A11y | SEO | BP | Report |\n|---|---:|---:|---:|---:|---|\n"
          while IFS= read -r line; do
            link="${link_lines[$i]-}"
            link="${link%%[[:space:]]*}"
            table+="${line} $( [[ -n "$link" ]] && echo "[Report]($link)" || echo "-" ) |\n"
            i=$((i+1))
          done <<< "$rows"

          # escape for output
          table="${table//'%'/'%25'}"
          table="${table//$'\n'/'%0A'}"
          table="${table//$'\r'/'%0D'}"
          echo "md=$table" >> $GITHUB_OUTPUT

      - name: '🔎 Resolve PR number'
        id: pr
        if: always()
        env:
          REPO: ${{ github.repository }}
          SHA: ${{ github.event.deployment.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq >/dev/null 2>&1; }
          json=$(curl -sS -H "Authorization: token ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/${REPO}/commits/${SHA}/pulls")
          pr=$(echo "$json" | jq -r 'map(select(.state!="closed")) | first | .number // empty')
          echo "number=$pr" >> $GITHUB_OUTPUT
          [[ -n "$pr" ]] && echo "Found PR #$pr" || echo "No open PR found for $SHA"

      - name: '💬 Sticky Lighthouse comment'
        if: always() && steps.pr.outputs.number != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: lighthouse-report
          number: ${{ steps.pr.outputs.number }}
          message: |
            ## 🚀 Lighthouse Performance Report
            **Preview URL:** ${{ steps.url.outputs.preview_url }}
            **Status:** ${{ steps.parse.outputs.overall }}

            ${{ steps.table.outputs.md }}

            **Assertions:** ✅ ${{ steps.parse.outputs.passc }} · ⚠️ ${{ steps.parse.outputs.warnc }} · ❌ ${{ steps.parse.outputs.errc }}

      - name: '📋 Job summary'
        if: always()
        shell: bash
        run: |
          {
            echo "## 🚀 Lighthouse (Preview)";
            echo "- URL: ${{ steps.url.outputs.preview_url }}";
            echo "- Status: ${{ steps.parse.outputs.overall }}";
            echo "";
            echo "${{ steps.table.outputs.md }}";
            echo "";
            echo "**Assertions:** ✅ ${{ steps.parse.outputs.passc }} · ⚠️ ${{ steps.parse.outputs.warnc }} · ❌ ${{ steps.parse.outputs.errc }}";
          } >> $GITHUB_STEP_SUMMARY
