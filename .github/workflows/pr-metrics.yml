name: "PR Metrics & Comments"

on:
  pull_request:
    branches: ["main", "develop"]
    paths-ignore: ["**.md", "docs/**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.15.0"
  PNPM_HOME: /home/runner/.local/share/pnpm

jobs:
  # Generate metrics for the PR branch
  pr-metrics:
    name: "Generate PR Metrics"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: "🔄 Checkout PR branch"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: "💾 Cache pnpm store"
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: "📥 Install dependencies"
        run: pnpm run ci:install:frozen

      - name: "🧪 Run tests and collect coverage"
        run: pnpm run test:coverage:ci

      - name: "🏗️ Build frontend"
        run: pnpm run build:frontend

      - name: "🚀 Run Lighthouse CI"
        run: |
          npx puppeteer browsers install chrome
          timeout 300 pnpm --filter leenders-coaching-nl run perf:lighthouse:ci || echo "Lighthouse completed with warnings"

      - name: "📊 Collect all metrics"
        run: |
          cd .github/scripts && pnpm install
          cd ../..
          node .github/scripts/metrics-collector.js all

      - name: "📤 Upload PR metrics"
        uses: actions/upload-artifact@v4
        with:
          name: pr-metrics-${{ github.run_id }}
          path: |
            coverage-metrics.json
            bundle-stats.json
            lighthouse-metrics.json
            eslint-metrics.json
            typescript-metrics.json
            metrics-summary.json
          retention-days: 30

  # Get baseline metrics from main branch
  baseline-metrics:
    name: "Generate Baseline Metrics"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: "🔄 Checkout current branch (temporary for testing)"
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: "💾 Cache pnpm store"
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_HOME }}
          key: pnpm-baseline-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: "📥 Install dependencies"
        run: pnpm run ci:install:frozen

      - name: "🧪 Run baseline tests"
        run: pnpm run test:coverage:ci

      - name: "🏗️ Build baseline frontend"
        run: pnpm run build:frontend

      - name: "📊 Collect baseline metrics"
        run: |
          cd .github/scripts && pnpm install
          cd ../..
          node .github/scripts/metrics-collector.js all

      - name: "📤 Upload baseline metrics"
        uses: actions/upload-artifact@v4
        with:
          name: baseline-metrics-${{ github.run_id }}
          path: |
            coverage-metrics.json
            bundle-stats.json
            lighthouse-metrics.json
            eslint-metrics.json
            typescript-metrics.json
            metrics-summary.json
          retention-days: 30

  # Generate and post PR comment
  pr-comment:
    name: "Post PR Metrics Comment"
    runs-on: ubuntu-latest
    needs: [pr-metrics, baseline-metrics]
    timeout-minutes: 5

    steps:
      - name: "🔄 Checkout repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: "📥 Download PR metrics"
        uses: actions/download-artifact@v4
        with:
          name: pr-metrics-${{ github.run_id }}
          path: ./pr-metrics

      - name: "📥 Download baseline metrics"
        uses: actions/download-artifact@v4
        with:
          name: baseline-metrics-${{ github.run_id }}
          path: ./baseline-metrics

      - name: "📊 Generate metrics comparison"
        run: |
          cd .github/scripts && pnpm install
          cd ../..
          node .github/scripts/generate-pr-comment.js

      - name: "💬 Post PR comment"
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');

            // Check if we already have a comment from this workflow
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('📊 PR Metrics Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Updated existing PR comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Created new PR comment');
            }
