name: 'Reusable Build Workflow'

on:
  workflow_call:
    inputs:
      package-name:
        description: 'Name of the package to build'
        required: true
        type: string
      package-filter:
        description: 'pnpm filter for the package'
        required: true
        type: string
      build-type:
        description: 'Type of build to perform'
        required: false
        default: 'standard'
        type: string
      build-command:
        description: 'Build command to run'
        required: false
        default: 'build'
        type: string
      verify-command:
        description: 'Verification command to run after build'
        required: false
        default: 'verify:build'
        type: string
      analyze-bundle:
        description: 'Whether to analyze bundle after build'
        required: false
        default: false
        type: boolean
      analyze-command:
        description: 'Bundle analysis command'
        required: false
        default: 'analyze:bundle'
        type: string
      package-build:
        description: 'Whether to package build artifacts'
        required: false
        default: false
        type: boolean
      package-command:
        description: 'Package command to run'
        required: false
        default: 'package:build'
        type: string
      cache-nextjs:
        description: 'Whether to cache Next.js build'
        required: false
        default: false
        type: boolean
      working-directory:
        description: 'Working directory for the job'
        required: false
        default: ''
        type: string
    secrets:
      NEXT_PUBLIC_SANITY_PROJECT_ID:
        required: false
      NEXT_PUBLIC_SANITY_DATASET:
        required: false
      NEXT_PUBLIC_SANITY_API_VERSION:
        required: false
      SANITY_API_TOKEN:
        required: false
      RESEND_API_KEY:
        required: false

jobs:
  build:
    name: 'Build ${{ inputs.package-name }}'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.1'
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '🗂️ Cache Next.js build'
        if: ${{ inputs.cache-nextjs }}
        uses: actions/cache@v4
        with:
          path: packages/leenders-coaching-nl/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('packages/leenders-coaching-nl/**/*.{js,jsx,ts,tsx}') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-
            nextjs-${{ runner.os }}-

      - name: '📥 Install dependencies'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm run ci:install:frozen

      - name: '🏗️ Build ${{ inputs.package-name }}'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm --filter ${{ inputs.package-filter }} run ${{ inputs.build-command }}

      - name: '📈 Analyze bundle size'
        if: ${{ inputs.analyze-bundle }}
        working-directory: ${{ inputs.working-directory }}
        run: pnpm --filter ${{ inputs.package-filter }} run ${{ inputs.analyze-command }} || echo "Bundle analysis completed"

      - name: '✅ Verify build output'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm --filter ${{ inputs.package-filter }} run ${{ inputs.verify-command }}

      - name: '📦 Package build artifacts'
        if: ${{ inputs.package-build }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          cd packages/${{ inputs.package-filter }}
          pnpm run ${{ inputs.package-command }}
          mv ${{ inputs.package-name }}-build.tar.gz ../../${{ inputs.package-name }}-build.tar.gz 2>/dev/null || echo "No artifacts to move"

      - name: '📤 Upload build artifacts'
        if: ${{ inputs.package-build }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.package-name }}-build-${{ github.sha }}
          path: ${{ inputs.package-name }}-build.tar.gz
          retention-days: 7
          compression-level: 6
