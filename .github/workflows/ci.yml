name: 'Continuous Integration'

on:
  pull_request:
    branches: ['main']
    paths-ignore: ['**.md', 'docs/**']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  quality-gate:
    name: 'Quality Gate'
    uses: ./.github/workflows/setup.yml
    with:
      install-command: ci:install

  quality-checks:
    name: 'Quality Checks'
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 10
    steps:
      - name: 'üîÑ Checkout repository'
        uses: actions/checkout@v5

      - name: 'üì• Install dependencies'
        run: pnpm run ci:install:frozen

      - name: 'üîç Quality checks'
        run: pnpm run ci:quality

  frontend-tests:
    name: 'Frontend Tests'
    uses: ./.github/workflows/test.yml
    needs: quality-gate
    with:
      test-command: ci:test
      quality-command: ''
      security-command: ''
      coverage-upload: true
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

  studio-validation:
    name: 'Studio Validation'
    uses: ./.github/workflows/build.yml
    needs: quality-gate
    with:
      package-name: 'studio'
      package-filter: 'studio-leenders-coaching-nl'
      build-command: 'build:studio'
      verify-command: 'validate:schema'
      analyze-bundle: false
      package-build: false
      working-directory: ''
    secrets:
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}

  build-verification:
    name: 'Build Verification'
    uses: ./.github/workflows/build.yml
    needs: [quality-gate, frontend-tests, studio-validation]
    with:
      package-name: 'all-packages'
      package-filter: 'leenders-coaching-nl'
      build-command: 'ci:build'
      verify-command: 'ci:verify'
      analyze-bundle: false
      package-build: false
      working-directory: ''
    secrets:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

  pr-comment:
    name: 'PR Comment (CI Summary)'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality-gate, frontend-tests, studio-validation, build-verification]
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: 'üí¨ Sticky PR comment ‚Äì CI'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: ci-summary
          number: ${{ github.event.pull_request.number }}
          message: |
            ## ‚úÖ CI Summary
            - **Quality Gate:** ${{ needs.quality-gate.result == 'success' && '‚úÖ' || '‚ùå' }}
            - **Frontend Tests:** ${{ needs.frontend-tests.result == 'success' && '‚úÖ' || '‚ùå' }}
            - **Studio Validation:** ${{ needs.studio-validation.result == 'success' && '‚úÖ' || '‚ùå' }}
            - **Build Verification:** ${{ needs.build-verification.result == 'success' && '‚úÖ' || '‚ùå' }}

            *Generated by GitHub Actions CI*
