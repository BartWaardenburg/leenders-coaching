name: 'Continuous Integration'

on:
  pull_request:
    branches: ['main']
    paths-ignore: ['**.md', 'docs/**']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.1'
  PNPM_HOME: /home/runner/.local/share/pnpm

jobs:
  quality-gate:
    name: 'Quality Gate'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: '🎯 Generate cache key'
        id: cache-key
        run: |
          echo "key=pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Cache pnpm store'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install

      - name: '🔍 Quality checks'
        run: pnpm run ci:quality

  frontend-tests:
    name: 'Frontend Tests'
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 10

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Restore pnpm cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ needs.quality-gate.outputs.cache-key }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🧪 Run comprehensive tests'
        run: pnpm run ci:test

      - name: '📤 Upload coverage reports'
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./packages/leenders-coaching-nl/coverage
          fail_ci_if_error: false
          verbose: true
          flags: frontend

  studio-validation:
    name: 'Studio Validation'
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 8

    env:
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Restore pnpm cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ needs.quality-gate.outputs.cache-key }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🏗️ Build Sanity studio'
        run: pnpm run build:studio

      - name: '🔍 Validate schema'
        run: pnpm --filter studio-leenders-coaching-nl run validate:schema

  build-verification:
    name: 'Build Verification'
    runs-on: ubuntu-latest
    needs: [quality-gate, frontend-tests, studio-validation]
    timeout-minutes: 12

    env:
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
      SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: '🔄 Checkout repository'
        uses: actions/checkout@v5

      - name: '🔧 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 'Get pnpm store path'
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: '💾 Restore pnpm cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ needs.quality-gate.outputs.cache-key }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: '📥 Install dependencies'
        run: pnpm run ci:install:frozen

      - name: '🏗️ Build all packages'
        run: pnpm run ci:build

      - name: '✅ Verify build artifacts'
        run: pnpm run ci:verify

  pr-comment:
    name: 'PR Comment (CI Summary)'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality-gate, frontend-tests, studio-validation, build-verification]
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: '💬 Sticky PR comment – CI'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: ci-summary
          number: ${{ github.event.pull_request.number }}
          message: |
            ## ✅ CI Summary
            - **Quality Gate:** ${{ needs.quality-gate.result == 'success' && '✅' || '❌' }}
            - **Frontend Tests:** ${{ needs.frontend-tests.result == 'success' && '✅' || '❌' }}
            - **Studio Validation:** ${{ needs.studio-validation.result == 'success' && '✅' || '❌' }}
            - **Build Verification:** ${{ needs.build-verification.result == 'success' && '✅' || '❌' }}

            *Generated by GitHub Actions CI*
