name: 'Lighthouse (Production)'

on: deployment_status

permissions:
  contents: read
  deployments: read
  issues: write

jobs:
  lighthouse:
    name: 'Lighthouse CI (Production) – ${{ matrix.formFactor }}'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      matrix:
        formFactor: [mobile, desktop]
    if: |
      github.event.deployment_status.state == 'success' &&
      contains(github.event.deployment.environment, 'Production') &&
      !contains(github.event.deployment.environment, 'Preview')

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: '⚙️ Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: '🧪 Test production URL accessibility'
        run: |
          urls=( "https://leenders-coaching.vercel.app/"
                 "https://leenders-coaching.vercel.app/over-mij"
                 "https://leenders-coaching.vercel.app/aanpak"
                 "https://leenders-coaching.vercel.app/coaching"
                 "https://leenders-coaching.vercel.app/contact" )

          echo "🔍 Testing production URL accessibility for all pages:"
          for production_url in "${urls[@]}"; do
            echo "  Testing: $production_url"
            response=$(curl -sL --max-time 30 --max-redirs 5 "$production_url" || echo "CURL_FAILED")
            if [[ "$response" == "CURL_FAILED" ]]; then
              echo "❌ Production URL is not accessible (network error)"
              echo "   URL: $production_url"
              exit 1
            else
              code=$(curl -s -o /dev/null -w "%{http_code}" "$production_url")
              if [[ "$code" -ge 200 ]] && [[ "$code" -lt 400 ]]; then
                echo "✅ HTTP $code - accessible"
              else
                echo "⚠️ Production URL returns HTTP $code"
                echo "   URL: $production_url"
                exit 1
              fi
            fi
          done
          echo "🎯 All production pages are accessible and ready for Lighthouse testing"

      - name: '🚀 Run Lighthouse CI (Production)'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        continue-on-error: true
        with:
          urls: |
            https://leenders-coaching.vercel.app/
            https://leenders-coaching.vercel.app/over-mij
            https://leenders-coaching.vercel.app/aanpak
            https://leenders-coaching.vercel.app/coaching
            https://leenders-coaching.vercel.app/contact
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          budgetPath: packages/leenders-coaching-nl/budget.json
          uploadArtifacts: true
          artifactName: lighthouse-${{ matrix.formFactor }}
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_FORM_FACTOR: ${{ matrix.formFactor }}

      - name: '📊 Parse Lighthouse results'
        id: parse
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq -y >/dev/null 2>&1; }

          # ---- Safe defaults (avoid -u crashes) ----
          perf="N/A"; a11y="N/A"; seo="N/A"; bp="N/A"; overall="⚠️ NO RESULTS"
          first_link=""
          tmp_assert="$(mktemp)"
          tmp_categories="$(mktemp)"
          vitals_table="| Page | LCP (ms) | CLS | TBT (ms) | FCP (ms) | SI (ms) | TTI (ms) | Req | Bytes (KB) |\n|---|---:|---:|---:|---:|---:|---:|---:|---:|\n"

          results_dir="${{ steps.lhci.outputs.resultsPath || '' }}"
          assertion_file="$results_dir/assertion-results.json"

          # ----- Assertions table + counters -----
          echo "| Level | Check | Expected | Actual | Operator | URL |" > "$tmp_assert"
          echo "|---|---|---|---|---|---|" >> "$tmp_assert"

          errc=0; warnc=0; passc=0
          if [[ -f "$assertion_file" ]]; then
            errc=$(jq '[.[] | select(.level=="error")] | length' "$assertion_file")
            warnc=$(jq '[.[] | select(.level=="warn")]  | length' "$assertion_file")
            passc=$(jq '[.[] | select(.level=="pass")]  | length' "$assertion_file")

            jq -r '
              [ .[] | select(.level!="pass")
                | { level, id: (.id // .auditId // "—"),
                    url: (.url // "—"),
                    op: (.result.operator // "—"),
                    exp: (.result.expected // "—"),
                    act: (.result.actual // "—") } ]
              | .[:25]
              | map("| \(.level) | \(.id) | \(.exp) | \(.act) | \(.op) | \(.url) |")
              | .[]
            ' "$assertion_file" >> "$tmp_assert"
          else
            echo "_No assertions file found._" > "$tmp_assert"
          fi

          echo "errc=$errc"   >> "$GITHUB_OUTPUT"
          echo "warnc=$warnc" >> "$GITHUB_OUTPUT"
          echo "passc=$passc" >> "$GITHUB_OUTPUT"
          { echo "assertions_md<<EOF"; cat "$tmp_assert"; echo "EOF"; } >> "$GITHUB_OUTPUT"

          # ----- LHRs present? compute averages/tables -----
          shopt -s nullglob
          lhrs=("$results_dir"/lhr-*.json)
          if [[ ${#lhrs[@]} -gt 0 ]]; then
            # Category averages
            readarray -t vals < <(jq -s '
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              {
                perf: (map(try .categories.performance.score catch null) | map(select(.!=null)) | avg),
                a11y: (map(try .categories.accessibility.score catch null) | map(select(.!=null)) | avg),
                seo:  (map(try .categories.seo.score catch null) | map(select(.!=null)) | avg),
                bp:   (map(try .categories["best-practices"].score catch null) | map(select(.!=null)) | avg)
              } | [.perf,.a11y,.seo,.bp] | map(if .==null then "N/A" else . end) | .[]
            ' "${lhrs[@]}")

            to_pct () { awk -v v="$1" 'BEGIN{printf "%.0f", v*100}'; }
            perf="${vals[0]}"; a11y="${vals[1]}"; seo="${vals[2]}"; bp="${vals[3]}"

            [[ "$perf" != "N/A" ]] && echo "perf=$(to_pct "$perf")" >> "$GITHUB_OUTPUT" || echo "perf=N/A" >> "$GITHUB_OUTPUT"
            [[ "$a11y" != "N/A" ]] && echo "a11y=$(to_pct "$a11y")" >> "$GITHUB_OUTPUT" || echo "a11y=N/A" >> "$GITHUB_OUTPUT"
            [[ "$seo"  != "N/A" ]] && echo "seo=$(to_pct "$seo")"   >> "$GITHUB_OUTPUT" || echo "seo=N/A"  >> "$GITHUB_OUTPUT"
            [[ "$bp"   != "N/A" ]] && echo "bp=$(to_pct "$bp")"     >> "$GITHUB_OUTPUT" || echo "bp=N/A"   >> "$GITHUB_OUTPUT"

            if [[ -f "$assertion_file" ]] && [[ "${errc:-0}" -gt 0 ]]; then
              overall="❌ FAILED"
            else
              overall="✅ PASSED"
            fi

            # Per-page Category Scores table
            jq -s -r '
              def norm(u): if u==null then null else (u | sub("[?#].*$"; "") | sub("/$"; "")) end;
              def key(x): norm(x.finalDisplayedUrl // x.finalUrl // x.requestedUrl);
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              group_by(key(.)) |
              map(. as $g |
                {
                  url: ($g | first | key(.)),
                  perf: ([ $g[] | try .categories.performance.score catch empty ] | map(select(.!=null)) | avg),
                  a11y: ([ $g[] | try .categories.accessibility.score catch empty ] | map(select(.!=null)) | avg),
                  seo:  ([ $g[] | try .categories.seo.score catch empty ] | map(select(.!=null)) | avg),
                  bp:   ([ $g[] | try .categories["best-practices"].score catch empty ] | map(select(.!=null)) | avg)
                }
              )
              | sort_by(.url)
              | (["| Page | Perf | A11y | SEO | BP |","|---|---:|---:|---:|---:|"] +
                 (map("| \(.url) | " +
                      (if .perf then ((.perf*100)|round|tostring) else "N/A" end) + " | " +
                      (if .a11y then ((.a11y*100)|round|tostring) else "N/A" end) + " | " +
                      (if .seo then ((.seo*100)|round|tostring) else "N/A" end) + " | " +
                      (if .bp then ((.bp*100)|round|tostring) else "N/A" end) + " |")))
              | .[]
            ' "${lhrs[@]}" > "$tmp_categories"
            { echo "categories_table_md<<EOF"; cat "$tmp_categories"; echo "EOF"; } >> "$GITHUB_OUTPUT"

            # Vitals table
            vitals_rows=$(jq -s -r '
              def norm(u): if u==null then null else (u | sub("[?#].*$"; "") | sub("/$"; "")) end;
              def key(x): norm(x.finalDisplayedUrl // x.finalUrl // x.requestedUrl);
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              group_by(key(.)) |
              map(. as $g |
                {
                  url: ($g | first | key(.)),
                  lcp: ([ $g[] | try .audits["largest-contentful-paint"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  cls: ([ $g[] | try .audits["cumulative-layout-shift"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  tbt: ([ $g[] | try .audits["total-blocking-time"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  fcp: ([ $g[] | try .audits["first-contentful-paint"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  si:  ([ $g[] | try .audits["speed-index"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  tti: ([ $g[] | try .audits["interactive"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  bytes: ([ $g[] | try .audits["total-byte-weight"].numericValue catch empty ] | map(select(.!=null)) | avg),
                  reqs: ([ $g[] | try (.audits["network-requests"].details.items | length) catch empty ] | map(select(.!=null)) | avg)
                }
              )
              | sort_by(.url)
              | map("| \(.url) | " +
                    (if .lcp then (.lcp|tostring) else "N/A" end) + " | " +
                    (if .cls then (.cls|tostring) else "N/A" end) + " | " +
                    (if .tbt then (.tbt|tostring) else "N/A" end) + " | " +
                    (if .fcp then (.fcp|tostring) else "N/A" end) + " | " +
                    (if .si  then (.si|tostring)  else "N/A" end) + " | " +
                    (if .tti then (.tti|tostring) else "N/A" end) + " | " +
                    (if .reqs then (.reqs|tostring) else "N/A" end) + " | " +
                    (if .bytes then (.bytes/1024|floor|tostring) else "N/A" end) + " |")[]
            ' "${lhrs[@]}")
            vitals_table+="$vitals_rows"$'\n'
            { echo "vitals_table_md<<EOF"; echo "$vitals_table"; echo "EOF"; } >> "$GITHUB_OUTPUT"
          else
            { echo "categories_table_md<<EOF"; echo "_No LHR files found._"; echo "EOF"; } >> "$GITHUB_OUTPUT"
            { echo "vitals_table_md<<EOF"; echo "$vitals_table"; echo "EOF"; } >> "$GITHUB_OUTPUT"
          fi

          # Try to grab the first public report link from the action output (if present)
          links_raw="${{ steps.lhci.outputs.links || '' }}"
          if [[ -n "$links_raw" ]]; then
            first_link="$(printf '%s\n' "$links_raw" | grep -Eo 'https?://[^ )]+' | head -n1 || true)"
          fi
          echo "first_report_link=$first_link" >> "$GITHUB_OUTPUT"

          # Minimal environment info for the issue body
          env_md="| Key | Value |\n|---|---|\n| Form Factor | ${{ matrix.formFactor }} |\n| Commit | ${{ github.sha }} |\n| Runner | ${RUNNER_OS:-unknown} |\n| Trigger | Production Deployment |"
          { echo "env_md<<EOF"; echo "$env_md"; echo "EOF"; } >> "$GITHUB_OUTPUT"

          # ----- Job Summary (no unbound vars) -----
          {
            echo "## 🚀 Production Lighthouse – ${{ matrix.formFactor }}";
            echo "";
            echo "**Averages (all pages/runs):**";
            echo "";
            echo "| Category | Score |";
            echo "|---|---|";
            echo "| Performance | ${perf} |";
            echo "| Accessibility | ${a11y} |";
            echo "| SEO | ${seo} |";
            echo "| Best Practices | ${bp} |";
            echo "";
            echo "### Category Scores";
            echo "<details>";
            echo "<summary>📊 Category Scores</summary>";
            echo "";
            cat "$tmp_categories" || true
            echo "</details>";
            if [[ -n "$first_link" ]]; then
              echo "";
              echo "- Temporary public report (first page): ${first_link}";
            fi
            echo "";
            echo "### Core Metrics";
            echo "<details>";
            echo "<summary>🚀 Core Web Vitals</summary>";
            echo "";
            echo "${vitals_table}";
            echo "</details>";
            echo "";
            echo "### Assertion details";
            echo "<details>";
            echo "<summary>🔍 Assertion Details</summary>";
            echo "";
            cat "$tmp_assert";
            echo "</details>";
          } >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by GitHub Actions Lighthouse (Production)*" >> $GITHUB_STEP_SUMMARY

          # ----- Expose outputs for issue body -----
          {
            echo "averages_md<<EOF"
            echo "| Category | Score |"
            echo "|---|---|"
            echo "| Performance | ${perf} |"
            echo "| Accessibility | ${a11y} |"
            echo "| SEO | ${seo} |"
            echo "| Best Practices | ${bp} |"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: '🚨 Open regression issue when failed'
        if: failure() && github.event_name != 'schedule'
        uses: actions/github-script@v7
        env:
          FIRST_REPORT: ${{ steps.parse.outputs.first_report_link }}
          AVERAGES_MD: ${{ steps.parse.outputs.averages_md }}
          CATEGORIES_TABLE_MD: ${{ steps.parse.outputs.categories_table_md }}
          VITALS_TABLE_MD: ${{ steps.parse.outputs.vitals_table_md }}
          ASSERTIONS_MD: ${{ steps.parse.outputs.assertions_md }}
          ENV_MD: ${{ steps.parse.outputs.env_md }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const firstReport = (process.env.FIRST_REPORT || '').trim();
            const averagesMd = process.env.AVERAGES_MD || '';
            const categoriesTableMd = process.env.CATEGORIES_TABLE_MD || '';
            const vitalsTableMd = process.env.VITALS_TABLE_MD || '';
            const assertionsMd = process.env.ASSERTIONS_MD || '';
            const envMd = process.env.ENV_MD || '';

            const title = '🚨 Lighthouse Performance Regression – ${{ matrix.formFactor }} (' + new Date().toISOString().slice(0,10) + ')';

            const body = '**Form factor:** `${{ matrix.formFactor }}`\n\n' +
              '**Commit:** `${{ github.sha }}`\n' +
              '**Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n' +
              (firstReport ? '**First report:** ' + firstReport + '\n' : '') +
              '\n---\n\n' +
              '## 📊 Performance Summary\n' +
              'This issue was automatically created due to Lighthouse performance regressions detected during production deployment.\n\n' +
              '**Action Required:** Review the performance metrics below and investigate the regressions.\n\n' +
              '---\n\n' +
              '### Averages (all pages/runs)\n' +
              averagesMd + '\n\n' +
              '---\n\n' +
              '### Category Scores\n' +
              '<details>\n<summary>📊 Category Scores</summary>\n\n' +
              categoriesTableMd + '\n</details>\n\n' +
              '---\n\n' +
              '### Core Metrics\n' +
              '<details>\n<summary>🚀 Core Web Vitals</summary>\n\n' +
              vitalsTableMd + '\n</details>\n\n' +
              '---\n\n' +
              '### Assertion details\n' +
              '<details>\n<summary>🔍 Assertion Details</summary>\n\n' +
              assertionsMd + '\n</details>\n\n' +
              '---\n\n' +
              '### Environment\n' +
              envMd + '\n\n' +
              '---\n\n' +
              '*Generated by GitHub Actions Lighthouse (Production)*';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['performance', 'lighthouse', 'regression', 'needs-investigation', 'production']
            });
