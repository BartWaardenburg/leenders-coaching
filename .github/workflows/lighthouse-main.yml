name: 'Lighthouse (Production)'

on: deployment_status

permissions:
  contents: read
  deployments: read
  issues: write

jobs:
  lighthouse:
    name: 'Lighthouse CI (Production) – ${{ matrix.formFactor }}'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      matrix:
        formFactor: [mobile, desktop]
    if: |
      github.event.deployment_status.state == 'success' &&
      contains(github.event.deployment.environment, 'Production') &&
      contains(github.event.deployment.environment, 'leenders-coaching') &&
      !contains(github.event.deployment.environment, 'Preview') &&
      !contains(github.event.deployment.environment, 'studio')
    concurrency:
      group: lhci-prod-${{ github.event.deployment.id }}-${{ matrix.formFactor }}
      cancel-in-progress: true

    env:
      LHCI_URLS: |
        https://leenders-coaching.vercel.app/
        https://leenders-coaching.vercel.app/over-mij
        https://leenders-coaching.vercel.app/aanpak
        https://leenders-coaching.vercel.app/coaching
        https://leenders-coaching.vercel.app/contact

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: '⚙️ Setup Environment'
        uses: ./.github/actions/setup
        with:
          node-version: '22'
          pnpm-version: '10.15.1'
          working-directory: ''

      - name: '🚀 Run Lighthouse CI (Production)'
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        continue-on-error: true
        with:
          urls: ${{ env.LHCI_URLS }}
          configPath: packages/leenders-coaching-nl/lighthouserc.ci.cjs
          budgetPath: packages/leenders-coaching-nl/budget.json
          uploadArtifacts: true
          artifactName: lighthouse-${{ matrix.formFactor }}
          temporaryPublicStorage: true
        env:
          LHCI_FORM_FACTOR: ${{ matrix.formFactor }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: '📊 Parse Lighthouse results'
        id: parse
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq -y >/dev/null 2>&1; }

          # ---- Safe defaults (avoid -u crashes) ----
          perf="N/A"; a11y="N/A"; seo="N/A"; bp="N/A"; overall="⚠️ NO RESULTS"
          perf_pct="N/A"; a11y_pct="N/A"; seo_pct="N/A"; bp_pct="N/A"
          first_link=""
          tmp_assert="$(mktemp)"
          tmp_categories="$(mktemp)"

          # Proper header with real newlines (no literal \n)
          vitals_header=$'| Page | LCP (ms) | CLS | TBT (ms) | FCP (ms) | SI (ms) | TTI (ms) | Req | Bytes (KB) |\n|---|---:|---:|---:|---:|---:|---:|---:|---:|'

          # Utility: % conversion for category scores
          to_pct () { awk -v v="$1" 'BEGIN{printf "%.0f", v*100}'; }

          results_dir="${{ steps.lhci.outputs.resultsPath || '' }}"
          assertion_file="$results_dir/assertion-results.json"

          # ----- Assertions table + counters -----
          echo "| Level | Check | Expected | Actual | Operator | URL |" > "$tmp_assert"
          echo "|---|---|---|---|---|---|" >> "$tmp_assert"

          errc=0; warnc=0; passc=0
          if [[ -f "$assertion_file" ]]; then
            errc=$(jq '[.[] | select(.level=="error")] | length' "$assertion_file")
            warnc=$(jq '[.[] | select(.level=="warn")]  | length' "$assertion_file")
            passc=$(jq '[.[] | select(.level=="pass")]  | length' "$assertion_file")

            jq -r '
              [ .[] | select(.level!="pass")
                | { level, 
                    id: (.id // .auditId // .name // "—"),
                    url: (.url // "—"),
                    op: (.result.operator // .operator // "—"),
                    exp: (.result.expected // .expected // "—"),
                    act: (.result.actual    // .actual   // "—") } ]
              | .[:25]
              | map("| \(.level) | \(.id) | \(.exp) | \(.act) | \(.op) | \(.url) |")
              | .[]
            ' "$assertion_file" >> "$tmp_assert"
          else
            echo "_No assertions file found._" > "$tmp_assert"
          fi

          echo "errc=$errc"   >> "$GITHUB_OUTPUT"
          echo "warnc=$warnc" >> "$GITHUB_OUTPUT"
          echo "passc=$passc" >> "$GITHUB_OUTPUT"
          { echo "assertions_md<<EOF"; cat "$tmp_assert"; echo "EOF"; } >> "$GITHUB_OUTPUT"

          # ----- LHRs present? compute averages/tables -----
          if [[ -n "${results_dir:-}" && -d "$results_dir" ]]; then
            shopt -s nullglob
            lhrs=("$results_dir"/lhr-*.json)
          else
            lhrs=()
          fi

          if [[ ${#lhrs[@]} -gt 0 ]]; then
            # Category averages as floats 0..1 - use array assignment for better compatibility
            vals=($(jq -s '
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              {
                perf: (map(try .categories.performance.score          catch null) | map(select(.!=null)) | avg),
                a11y: (map(try .categories.accessibility.score        catch null) | map(select(.!=null)) | avg),
                seo:  (map(try .categories.seo.score                  catch null) | map(select(.!=null)) | avg),
                bp:   (map(try .categories["best-practices"].score    catch null) | map(select(.!=null)) | avg)
              } | [.perf,.a11y,.seo,.bp] | map(if .==null then "N/A" else . end) | .[]
            ' "${lhrs[@]}"))

            perf="${vals[0]}"; a11y="${vals[1]}"; seo="${vals[2]}"; bp="${vals[3]}"

            # Convert to integer percentages for display + outputs
            if [[ "$perf" != "N/A" ]]; then perf_pct=$(to_pct "$perf"); fi
            if [[ "$a11y" != "N/A" ]]; then a11y_pct=$(to_pct "$a11y"); fi
            if [[ "$seo"  != "N/A" ]]; then seo_pct=$(to_pct "$seo"); fi
            if [[ "$bp"   != "N/A" ]]; then bp_pct=$(to_pct "$bp"); fi

            echo "perf=${perf_pct}" >> "$GITHUB_OUTPUT"
            echo "a11y=${a11y_pct}" >> "$GITHUB_OUTPUT"
            echo "seo=${seo_pct}"   >> "$GITHUB_OUTPUT"
            echo "bp=${bp_pct}"     >> "$GITHUB_OUTPUT"

            if [[ -f "$assertion_file" ]] && [[ "${errc:-0}" -gt 0 ]]; then
              overall="❌ FAILED"
            else
              overall="✅ PASSED"
            fi

            # Per-page Category Scores table (already rounded to integers)
            jq -s -r '
              def norm(u): if u==null then null else (u | sub("[?#].*$"; "") | sub("/$"; "")) end;
              def key(x): norm(x.finalDisplayedUrl // x.finalUrl // x.requestedUrl);
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              group_by(key(.)) |
              map(. as $g |
                {
                  url: ($g | first | key(.)),
                  perf: ([ $g[] | try .categories.performance.score catch empty ]       | map(select(.!=null)) | avg),
                  a11y: ([ $g[] | try .categories.accessibility.score catch empty ]     | map(select(.!=null)) | avg),
                  seo:  ([ $g[] | try .categories.seo.score catch empty ]               | map(select(.!=null)) | avg),
                  bp:   ([ $g[] | try .categories["best-practices"].score catch empty ] | map(select(.!=null)) | avg)
                }
              )
              | sort_by(.url)
              | (["| Page | Perf | A11y | SEO | BP |","|---|---:|---:|---:|---:|"] +
                 (map("| \(.url) | " +
                      (if .perf then ((.perf*100)|round|tostring) else "N/A" end) + " | " +
                      (if .a11y then ((.a11y*100)|round|tostring) else "N/A" end) + " | " +
                      (if .seo  then ((.seo *100)|round|tostring) else "N/A" end) + " | " +
                      (if .bp   then ((.bp  *100)|round|tostring) else "N/A" end) + " |")))
              | .[]
            ' "${lhrs[@]}" > "$tmp_categories"
            { echo "categories_table_md<<EOF"; cat "$tmp_categories"; echo "EOF"; } >> "$GITHUB_OUTPUT"

            # Core Web Vitals table with rounding:
            # - ms metrics rounded to integers
            # - CLS to 3 decimals
            # - Req rounded to int
            # - Bytes -> KB rounded to int
            vitals_rows=$(jq -s -r '
              def norm(u): if u==null then null else (u | sub("[?#].*$"; "") | sub("/$"; "")) end;
              def key(x): norm(x.finalDisplayedUrl // x.finalUrl // x.requestedUrl);
              def avg: (length as $n | if $n==0 then null else (add / $n) end);
              group_by(key(.)) |
              map(. as $g |
                {
                  url:   ($g | first | key(.)),
                  lcp:   ([ $g[] | try .audits["largest-contentful-paint"].numericValue   catch empty ] | map(select(.!=null)) | avg),
                  cls:   ([ $g[] | try .audits["cumulative-layout-shift"].numericValue    catch empty ] | map(select(.!=null)) | avg),
                  tbt:   ([ $g[] | try .audits["total-blocking-time"].numericValue        catch empty ] | map(select(.!=null)) | avg),
                  fcp:   ([ $g[] | try .audits["first-contentful-paint"].numericValue     catch empty ] | map(select(.!=null)) | avg),
                  si:    ([ $g[] | try .audits["speed-index"].numericValue                catch empty ] | map(select(.!=null)) | avg),
                  tti:   ([ $g[] | try .audits["interactive"].numericValue                catch empty ] | map(select(.!=null)) | avg),
                  bytes: ([ $g[] | try .audits["total-byte-weight"].numericValue          catch empty ] | map(select(.!=null)) | avg),
                  reqs:  ([ $g[] | try (.audits["network-requests"].details.items | length) catch empty ] | map(select(.!=null)) | avg)
                }
              )
              | sort_by(.url)
              | map("| \(.url) | " +
                    (if .lcp   then ((.lcp  | round)        | tostring) else "N/A" end) + " | " +
                    (if .cls   then (((.cls*1000)|round/1000)| tostring) else "N/A" end) + " | " +
                    (if .tbt   then ((.tbt  | round)        | tostring) else "N/A" end) + " | " +
                    (if .fcp   then ((.fcp  | round)        | tostring) else "N/A" end) + " | " +
                    (if .si    then ((.si   | round)        | tostring) else "N/A" end) + " | " +
                    (if .tti   then ((.tti  | round)        | tostring) else "N/A" end) + " | " +
                    (if .reqs  then ((.reqs | round)        | tostring) else "N/A" end) + " | " +
                    (if .bytes then (((.bytes/1024)|round)  | tostring) else "N/A" end) + " |")
              | .[]
            ' "${lhrs[@]}")

            # Expose vitals table (multiline) to outputs
            {
              echo "vitals_table_md<<EOF"
              echo "$vitals_header"
              echo "$vitals_rows"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"

          else
            { echo "categories_table_md<<EOF"; echo "_No LHR files found._"; echo "EOF"; } >> "$GITHUB_OUTPUT"
            { echo "vitals_table_md<<EOF"; echo "$vitals_header"; echo "EOF"; } >> "$GITHUB_OUTPUT"
          fi

          # Try to grab the first public report link from the action output (if present)
          links_raw="${{ steps.lhci.outputs.links || '' }}"
          if [[ -n "$links_raw" && "$links_raw" != "null" ]]; then
            if echo "$links_raw" | grep -q '^{'; then
              first_link="$(echo "$links_raw" | jq -r 'to_entries[0].value // empty' 2>/dev/null || true)"
            elif echo "$links_raw" | grep -q '^\s*\['; then
              first_link="$(echo "$links_raw" | jq -r '.[0] // empty' 2>/dev/null || true)"
            else
              first_link="$(echo "$links_raw" | tr ',' '\n' | grep -Eo 'https?://[^ )]+' | head -n1 || true)"
            fi
          fi
          echo "first_report_link=$first_link" >> "$GITHUB_OUTPUT"

          # Minimal environment info for the issue body
          env_md="| Key | Value |\n|---|---|\n| Form Factor | ${{ matrix.formFactor }} |\n| Commit | ${{ github.sha }} |\n| Runner | ${RUNNER_OS:-unknown} |\n| Trigger | Production Deployment |"
          { echo "env_md<<EOF"; echo -e "$env_md"; echo "EOF"; } >> "$GITHUB_OUTPUT"

          # Expose overall status
          echo "overall=$overall" >> "$GITHUB_OUTPUT"

          # ----- Job Summary (now with clean % and a real table) -----
          {
            echo "## 🚀 Production Lighthouse – ${{ matrix.formFactor }}";
            echo "";
            echo "**Averages (all pages/runs):**";
            echo "";
            echo "| Category | Score |";
            echo "|---|---|";
            echo "| Performance | ${perf_pct}% |";
            echo "| Accessibility | ${a11y_pct}% |";
            echo "| SEO | ${seo_pct}% |";
            echo "| Best Practices | ${bp_pct}% |";
            echo "";
            echo "### Category Scores";
            echo "<details>";
            echo "<summary>📊 Category Scores</summary>";
            echo "";
            cat "$tmp_categories" || true
            echo "</details>";
            if [[ -n "$first_link" ]]; then
              echo "";
              echo "- Temporary public report (first page): ${first_link}";
            fi
            echo "";
            echo "### Core Metrics";
            echo "<details>";
            echo "<summary>🚀 Core Web Vitals</summary>";
            echo "";
            echo "$vitals_header"
            echo "$vitals_rows"
            echo "</details>";
            echo "";
            echo "### Assertion details";
            echo "<details>";
            echo "<summary>🔍 Assertion Details</summary>";
            echo "";
            cat "$tmp_assert";
            echo "</details>";
          } >> $GITHUB_STEP_SUMMARY

          # Clean up temporary files
          rm -f "$tmp_assert" "$tmp_categories" 2>/dev/null || true

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by GitHub Actions Lighthouse (Production)*" >> $GITHUB_STEP_SUMMARY

          # ----- Expose outputs for issue body / PR comment (use % values) -----
          {
            echo "averages_md<<EOF"
            echo "| Category | Score |"
            echo "|---|---|"
            echo "| Performance | ${perf_pct}% |"
            echo "| Accessibility | ${a11y_pct}% |"
            echo "| SEO | ${seo_pct}% |"
            echo "| Best Practices | ${bp_pct}% |"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: '🚨 Open regression issue when failed'
        if: ${{ steps.parse.outputs.errc && steps.parse.outputs.errc != '0' && steps.parse.outputs.errc != '' }}
        uses: actions/github-script@v7
        env:
          FIRST_REPORT: ${{ steps.parse.outputs.first_report_link }}
          AVERAGES_MD: ${{ steps.parse.outputs.averages_md }}
          CATEGORIES_TABLE_MD: ${{ steps.parse.outputs.categories_table_md }}
          VITALS_TABLE_MD: ${{ steps.parse.outputs.vitals_table_md }}
          ASSERTIONS_MD: ${{ steps.parse.outputs.assertions_md }}
          ENV_MD: ${{ steps.parse.outputs.env_md }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const firstReport = (process.env.FIRST_REPORT || '').trim();
            const cleanReport = firstReport.includes(',') ? firstReport.split(',')[0] : firstReport;
            const title = '🚨 Lighthouse Performance Regression – ${{ matrix.formFactor }} (' + new Date().toISOString().slice(0,10) + ')';
            const body =
              '**Form factor:** `${{ matrix.formFactor }}`\n\n' +
              '**Commit:** `${{ github.sha }}`\n' +
              '**Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n' +
              (cleanReport ? '**First report:** ' + cleanReport + '\n' : '') +
              '\n---\n\n' +
              '## 📊 Performance Summary\n' +
              'This issue was automatically created due to Lighthouse performance regressions detected during production deployment.\n\n' +
              '---\n\n' +
              '### Averages (all pages/runs)\n' + (process.env.AVERAGES_MD || '') + '\n\n' +
              '### Category Scores\n<details>\n<summary>📊 Category Scores</summary>\n\n' +
              (process.env.CATEGORIES_TABLE_MD || '') + '\n</details>\n\n' +
              '### Core Metrics\n<details>\n<summary>🚀 Core Web Vitals</summary>\n\n' +
              (process.env.VITALS_TABLE_MD || '') + '\n</details>\n\n' +
              '### Assertion details\n<details>\n<summary>🔍 Assertion Details</summary>\n\n' +
              (process.env.ASSERTIONS_MD || '') + '\n</details>\n\n' +
              '### Environment\n' + (process.env.ENV_MD || '') + '\n\n' +
              '*Generated by GitHub Actions Lighthouse (Production)*';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['performance', 'lighthouse', 'regression', 'needs-investigation', 'production', 'automated']
            });

      - name: 'ℹ️ No regressions detected'
        if: ${{ !steps.parse.outputs.errc || steps.parse.outputs.errc == '0' || steps.parse.outputs.errc == '' }}
        run: |
          echo "✅ No Lighthouse assertion errors detected."

      - name: '📋 Job Summary'
        if: always()
        run: |
          echo "## 📋 Lighthouse Job Summary"
          echo ""
          echo "**Form Factor:** ${{ matrix.formFactor }}"
          echo "**Overall Status:** ${{ steps.parse.outputs.overall || 'Unknown' }}"
          ERRC="${{ steps.parse.outputs.errc || '0' }}"
          WARNC="${{ steps.parse.outputs.warnc || '0' }}"
          PASSC="${{ steps.parse.outputs.passc || '0' }}"
          echo "**Errors:** ${ERRC}"
          echo "**Warnings:** ${WARNC}"
          echo "**Passed:** ${PASSC}"
          echo ""
          if [[ "$ERRC" =~ ^[0-9]+$ && "$ERRC" -gt 0 ]]; then
            echo "❌ **Job failed due to performance regressions**"
            echo "   - Performance: ${{ steps.parse.outputs.perf || 'N/A' }}%"
            echo "   - Accessibility: ${{ steps.parse.outputs.a11y || 'N/A' }}%"
            echo "   - SEO: ${{ steps.parse.outputs.seo || 'N/A' }}%"
            echo "   - Best Practices: ${{ steps.parse.outputs.bp || 'N/A' }}%"
          else
            echo "✅ **Job completed successfully**"
            echo "   - No performance regressions detected"
          fi
